// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/poll"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/predicate"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/vote"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/votetemplate"
)

// VoteUpdate is the builder for updating Vote entities.
type VoteUpdate struct {
	config
	hooks    []Hook
	mutation *VoteMutation
}

// Where appends a list predicates to the VoteUpdate builder.
func (vu *VoteUpdate) Where(ps ...predicate.Vote) *VoteUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *VoteUpdate) SetUpdatedAt(t time.Time) *VoteUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// SetIsDeleted sets the "is_deleted" field.
func (vu *VoteUpdate) SetIsDeleted(b bool) *VoteUpdate {
	vu.mutation.SetIsDeleted(b)
	return vu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (vu *VoteUpdate) SetNillableIsDeleted(b *bool) *VoteUpdate {
	if b != nil {
		vu.SetIsDeleted(*b)
	}
	return vu
}

// SetDeletedAt sets the "deleted_at" field.
func (vu *VoteUpdate) SetDeletedAt(t time.Time) *VoteUpdate {
	vu.mutation.SetDeletedAt(t)
	return vu
}

// SetNonce sets the "nonce" field.
func (vu *VoteUpdate) SetNonce(s string) *VoteUpdate {
	vu.mutation.SetNonce(s)
	return vu
}

// SetTemplateID sets the "template" edge to the VoteTemplate entity by ID.
func (vu *VoteUpdate) SetTemplateID(id int) *VoteUpdate {
	vu.mutation.SetTemplateID(id)
	return vu
}

// SetTemplate sets the "template" edge to the VoteTemplate entity.
func (vu *VoteUpdate) SetTemplate(v *VoteTemplate) *VoteUpdate {
	return vu.SetTemplateID(v.ID)
}

// SetPollID sets the "poll" edge to the Poll entity by ID.
func (vu *VoteUpdate) SetPollID(id int) *VoteUpdate {
	vu.mutation.SetPollID(id)
	return vu
}

// SetNillablePollID sets the "poll" edge to the Poll entity by ID if the given value is not nil.
func (vu *VoteUpdate) SetNillablePollID(id *int) *VoteUpdate {
	if id != nil {
		vu = vu.SetPollID(*id)
	}
	return vu
}

// SetPoll sets the "poll" edge to the Poll entity.
func (vu *VoteUpdate) SetPoll(p *Poll) *VoteUpdate {
	return vu.SetPollID(p.ID)
}

// Mutation returns the VoteMutation object of the builder.
func (vu *VoteUpdate) Mutation() *VoteMutation {
	return vu.mutation
}

// ClearTemplate clears the "template" edge to the VoteTemplate entity.
func (vu *VoteUpdate) ClearTemplate() *VoteUpdate {
	vu.mutation.ClearTemplate()
	return vu
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (vu *VoteUpdate) ClearPoll() *VoteUpdate {
	vu.mutation.ClearPoll()
	return vu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VoteUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	vu.defaults()
	if len(vu.hooks) == 0 {
		if err = vu.check(); err != nil {
			return 0, err
		}
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vu.check(); err != nil {
				return 0, err
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VoteUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VoteUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VoteUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *VoteUpdate) defaults() {
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := vote.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *VoteUpdate) check() error {
	if _, ok := vu.mutation.TemplateID(); vu.mutation.TemplateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Vote.template"`)
	}
	return nil
}

func (vu *VoteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vote.Table,
			Columns: vote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vote.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(vote.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.IsDeleted(); ok {
		_spec.SetField(vote.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := vu.mutation.DeletedAt(); ok {
		_spec.SetField(vote.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := vu.mutation.Nonce(); ok {
		_spec.SetField(vote.FieldNonce, field.TypeString, value)
	}
	if vu.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vote.TemplateTable,
			Columns: []string{vote.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: votetemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vote.TemplateTable,
			Columns: []string{vote.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: votetemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vu.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.PollTable,
			Columns: []string{vote.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: poll.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.PollTable,
			Columns: []string{vote.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: poll.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// VoteUpdateOne is the builder for updating a single Vote entity.
type VoteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoteMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *VoteUpdateOne) SetUpdatedAt(t time.Time) *VoteUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// SetIsDeleted sets the "is_deleted" field.
func (vuo *VoteUpdateOne) SetIsDeleted(b bool) *VoteUpdateOne {
	vuo.mutation.SetIsDeleted(b)
	return vuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (vuo *VoteUpdateOne) SetNillableIsDeleted(b *bool) *VoteUpdateOne {
	if b != nil {
		vuo.SetIsDeleted(*b)
	}
	return vuo
}

// SetDeletedAt sets the "deleted_at" field.
func (vuo *VoteUpdateOne) SetDeletedAt(t time.Time) *VoteUpdateOne {
	vuo.mutation.SetDeletedAt(t)
	return vuo
}

// SetNonce sets the "nonce" field.
func (vuo *VoteUpdateOne) SetNonce(s string) *VoteUpdateOne {
	vuo.mutation.SetNonce(s)
	return vuo
}

// SetTemplateID sets the "template" edge to the VoteTemplate entity by ID.
func (vuo *VoteUpdateOne) SetTemplateID(id int) *VoteUpdateOne {
	vuo.mutation.SetTemplateID(id)
	return vuo
}

// SetTemplate sets the "template" edge to the VoteTemplate entity.
func (vuo *VoteUpdateOne) SetTemplate(v *VoteTemplate) *VoteUpdateOne {
	return vuo.SetTemplateID(v.ID)
}

// SetPollID sets the "poll" edge to the Poll entity by ID.
func (vuo *VoteUpdateOne) SetPollID(id int) *VoteUpdateOne {
	vuo.mutation.SetPollID(id)
	return vuo
}

// SetNillablePollID sets the "poll" edge to the Poll entity by ID if the given value is not nil.
func (vuo *VoteUpdateOne) SetNillablePollID(id *int) *VoteUpdateOne {
	if id != nil {
		vuo = vuo.SetPollID(*id)
	}
	return vuo
}

// SetPoll sets the "poll" edge to the Poll entity.
func (vuo *VoteUpdateOne) SetPoll(p *Poll) *VoteUpdateOne {
	return vuo.SetPollID(p.ID)
}

// Mutation returns the VoteMutation object of the builder.
func (vuo *VoteUpdateOne) Mutation() *VoteMutation {
	return vuo.mutation
}

// ClearTemplate clears the "template" edge to the VoteTemplate entity.
func (vuo *VoteUpdateOne) ClearTemplate() *VoteUpdateOne {
	vuo.mutation.ClearTemplate()
	return vuo
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (vuo *VoteUpdateOne) ClearPoll() *VoteUpdateOne {
	vuo.mutation.ClearPoll()
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VoteUpdateOne) Select(field string, fields ...string) *VoteUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Vote entity.
func (vuo *VoteUpdateOne) Save(ctx context.Context) (*Vote, error) {
	var (
		err  error
		node *Vote
	)
	vuo.defaults()
	if len(vuo.hooks) == 0 {
		if err = vuo.check(); err != nil {
			return nil, err
		}
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VoteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vuo.check(); err != nil {
				return nil, err
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Vote)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from VoteMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VoteUpdateOne) SaveX(ctx context.Context) *Vote {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VoteUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VoteUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *VoteUpdateOne) defaults() {
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := vote.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *VoteUpdateOne) check() error {
	if _, ok := vuo.mutation.TemplateID(); vuo.mutation.TemplateCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Vote.template"`)
	}
	return nil
}

func (vuo *VoteUpdateOne) sqlSave(ctx context.Context) (_node *Vote, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   vote.Table,
			Columns: vote.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: vote.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Vote.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, vote.FieldID)
		for _, f := range fields {
			if !vote.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != vote.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(vote.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.IsDeleted(); ok {
		_spec.SetField(vote.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := vuo.mutation.DeletedAt(); ok {
		_spec.SetField(vote.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := vuo.mutation.Nonce(); ok {
		_spec.SetField(vote.FieldNonce, field.TypeString, value)
	}
	if vuo.mutation.TemplateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vote.TemplateTable,
			Columns: []string{vote.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: votetemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.TemplateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   vote.TemplateTable,
			Columns: []string{vote.TemplateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: votetemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if vuo.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.PollTable,
			Columns: []string{vote.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: poll.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vote.PollTable,
			Columns: []string{vote.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: poll.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Vote{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{vote.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
