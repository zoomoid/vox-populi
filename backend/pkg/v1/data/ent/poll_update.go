// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/poll"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/predicate"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/reaction"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/reactiontemplate"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/vote"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/votetemplate"
)

// PollUpdate is the builder for updating Poll entities.
type PollUpdate struct {
	config
	hooks    []Hook
	mutation *PollMutation
}

// Where appends a list predicates to the PollUpdate builder.
func (pu *PollUpdate) Where(ps ...predicate.Poll) *PollUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PollUpdate) SetUpdatedAt(t time.Time) *PollUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetIsDeleted sets the "is_deleted" field.
func (pu *PollUpdate) SetIsDeleted(b bool) *PollUpdate {
	pu.mutation.SetIsDeleted(b)
	return pu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (pu *PollUpdate) SetNillableIsDeleted(b *bool) *PollUpdate {
	if b != nil {
		pu.SetIsDeleted(*b)
	}
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PollUpdate) SetDeletedAt(t time.Time) *PollUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetTitle sets the "title" field.
func (pu *PollUpdate) SetTitle(s string) *PollUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetDescription sets the "description" field.
func (pu *PollUpdate) SetDescription(s string) *PollUpdate {
	pu.mutation.SetDescription(s)
	return pu
}

// SetIsLive sets the "is_live" field.
func (pu *PollUpdate) SetIsLive(b bool) *PollUpdate {
	pu.mutation.SetIsLive(b)
	return pu
}

// SetNillableIsLive sets the "is_live" field if the given value is not nil.
func (pu *PollUpdate) SetNillableIsLive(b *bool) *PollUpdate {
	if b != nil {
		pu.SetIsLive(*b)
	}
	return pu
}

// SetCanVote sets the "can_vote" field.
func (pu *PollUpdate) SetCanVote(b bool) *PollUpdate {
	pu.mutation.SetCanVote(b)
	return pu
}

// SetNillableCanVote sets the "can_vote" field if the given value is not nil.
func (pu *PollUpdate) SetNillableCanVote(b *bool) *PollUpdate {
	if b != nil {
		pu.SetCanVote(*b)
	}
	return pu
}

// SetCanReact sets the "can_react" field.
func (pu *PollUpdate) SetCanReact(b bool) *PollUpdate {
	pu.mutation.SetCanReact(b)
	return pu
}

// SetNillableCanReact sets the "can_react" field if the given value is not nil.
func (pu *PollUpdate) SetNillableCanReact(b *bool) *PollUpdate {
	if b != nil {
		pu.SetCanReact(*b)
	}
	return pu
}

// SetCanSeeResults sets the "can_see_results" field.
func (pu *PollUpdate) SetCanSeeResults(b bool) *PollUpdate {
	pu.mutation.SetCanSeeResults(b)
	return pu
}

// SetNillableCanSeeResults sets the "can_see_results" field if the given value is not nil.
func (pu *PollUpdate) SetNillableCanSeeResults(b *bool) *PollUpdate {
	if b != nil {
		pu.SetCanSeeResults(*b)
	}
	return pu
}

// SetPublishedAt sets the "published_at" field.
func (pu *PollUpdate) SetPublishedAt(t time.Time) *PollUpdate {
	pu.mutation.SetPublishedAt(t)
	return pu
}

// SetUnpublishedAt sets the "unpublished_at" field.
func (pu *PollUpdate) SetUnpublishedAt(t time.Time) *PollUpdate {
	pu.mutation.SetUnpublishedAt(t)
	return pu
}

// AddVoteTemplateIDs adds the "vote_templates" edge to the VoteTemplate entity by IDs.
func (pu *PollUpdate) AddVoteTemplateIDs(ids ...int) *PollUpdate {
	pu.mutation.AddVoteTemplateIDs(ids...)
	return pu
}

// AddVoteTemplates adds the "vote_templates" edges to the VoteTemplate entity.
func (pu *PollUpdate) AddVoteTemplates(v ...*VoteTemplate) *PollUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.AddVoteTemplateIDs(ids...)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (pu *PollUpdate) AddVoteIDs(ids ...int) *PollUpdate {
	pu.mutation.AddVoteIDs(ids...)
	return pu
}

// AddVotes adds the "votes" edges to the Vote entity.
func (pu *PollUpdate) AddVotes(v ...*Vote) *PollUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.AddVoteIDs(ids...)
}

// AddReactionTemplateIDs adds the "reaction_templates" edge to the ReactionTemplate entity by IDs.
func (pu *PollUpdate) AddReactionTemplateIDs(ids ...int) *PollUpdate {
	pu.mutation.AddReactionTemplateIDs(ids...)
	return pu
}

// AddReactionTemplates adds the "reaction_templates" edges to the ReactionTemplate entity.
func (pu *PollUpdate) AddReactionTemplates(r ...*ReactionTemplate) *PollUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddReactionTemplateIDs(ids...)
}

// AddReactionIDs adds the "reactions" edge to the Reaction entity by IDs.
func (pu *PollUpdate) AddReactionIDs(ids ...int) *PollUpdate {
	pu.mutation.AddReactionIDs(ids...)
	return pu
}

// AddReactions adds the "reactions" edges to the Reaction entity.
func (pu *PollUpdate) AddReactions(r ...*Reaction) *PollUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddReactionIDs(ids...)
}

// Mutation returns the PollMutation object of the builder.
func (pu *PollUpdate) Mutation() *PollMutation {
	return pu.mutation
}

// ClearVoteTemplates clears all "vote_templates" edges to the VoteTemplate entity.
func (pu *PollUpdate) ClearVoteTemplates() *PollUpdate {
	pu.mutation.ClearVoteTemplates()
	return pu
}

// RemoveVoteTemplateIDs removes the "vote_templates" edge to VoteTemplate entities by IDs.
func (pu *PollUpdate) RemoveVoteTemplateIDs(ids ...int) *PollUpdate {
	pu.mutation.RemoveVoteTemplateIDs(ids...)
	return pu
}

// RemoveVoteTemplates removes "vote_templates" edges to VoteTemplate entities.
func (pu *PollUpdate) RemoveVoteTemplates(v ...*VoteTemplate) *PollUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.RemoveVoteTemplateIDs(ids...)
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (pu *PollUpdate) ClearVotes() *PollUpdate {
	pu.mutation.ClearVotes()
	return pu
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (pu *PollUpdate) RemoveVoteIDs(ids ...int) *PollUpdate {
	pu.mutation.RemoveVoteIDs(ids...)
	return pu
}

// RemoveVotes removes "votes" edges to Vote entities.
func (pu *PollUpdate) RemoveVotes(v ...*Vote) *PollUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pu.RemoveVoteIDs(ids...)
}

// ClearReactionTemplates clears all "reaction_templates" edges to the ReactionTemplate entity.
func (pu *PollUpdate) ClearReactionTemplates() *PollUpdate {
	pu.mutation.ClearReactionTemplates()
	return pu
}

// RemoveReactionTemplateIDs removes the "reaction_templates" edge to ReactionTemplate entities by IDs.
func (pu *PollUpdate) RemoveReactionTemplateIDs(ids ...int) *PollUpdate {
	pu.mutation.RemoveReactionTemplateIDs(ids...)
	return pu
}

// RemoveReactionTemplates removes "reaction_templates" edges to ReactionTemplate entities.
func (pu *PollUpdate) RemoveReactionTemplates(r ...*ReactionTemplate) *PollUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveReactionTemplateIDs(ids...)
}

// ClearReactions clears all "reactions" edges to the Reaction entity.
func (pu *PollUpdate) ClearReactions() *PollUpdate {
	pu.mutation.ClearReactions()
	return pu
}

// RemoveReactionIDs removes the "reactions" edge to Reaction entities by IDs.
func (pu *PollUpdate) RemoveReactionIDs(ids ...int) *PollUpdate {
	pu.mutation.RemoveReactionIDs(ids...)
	return pu
}

// RemoveReactions removes "reactions" edges to Reaction entities.
func (pu *PollUpdate) RemoveReactions(r ...*Reaction) *PollUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemoveReactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PollUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	pu.defaults()
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PollMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PollUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PollUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PollUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PollUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := poll.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PollUpdate) check() error {
	if v, ok := pu.mutation.Title(); ok {
		if err := poll.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Poll.title": %w`, err)}
		}
	}
	return nil
}

func (pu *PollUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   poll.Table,
			Columns: poll.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: poll.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(poll.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.IsDeleted(); ok {
		_spec.SetField(poll.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(poll.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.SetField(poll.FieldTitle, field.TypeString, value)
	}
	if value, ok := pu.mutation.Description(); ok {
		_spec.SetField(poll.FieldDescription, field.TypeString, value)
	}
	if value, ok := pu.mutation.IsLive(); ok {
		_spec.SetField(poll.FieldIsLive, field.TypeBool, value)
	}
	if value, ok := pu.mutation.CanVote(); ok {
		_spec.SetField(poll.FieldCanVote, field.TypeBool, value)
	}
	if value, ok := pu.mutation.CanReact(); ok {
		_spec.SetField(poll.FieldCanReact, field.TypeBool, value)
	}
	if value, ok := pu.mutation.CanSeeResults(); ok {
		_spec.SetField(poll.FieldCanSeeResults, field.TypeBool, value)
	}
	if value, ok := pu.mutation.PublishedAt(); ok {
		_spec.SetField(poll.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.UnpublishedAt(); ok {
		_spec.SetField(poll.FieldUnpublishedAt, field.TypeTime, value)
	}
	if pu.mutation.VoteTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VoteTemplatesTable,
			Columns: []string{poll.VoteTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: votetemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedVoteTemplatesIDs(); len(nodes) > 0 && !pu.mutation.VoteTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VoteTemplatesTable,
			Columns: []string{poll.VoteTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: votetemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VoteTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VoteTemplatesTable,
			Columns: []string{poll.VoteTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: votetemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vote.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedVotesIDs(); len(nodes) > 0 && !pu.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ReactionTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionTemplatesTable,
			Columns: []string{poll.ReactionTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reactiontemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedReactionTemplatesIDs(); len(nodes) > 0 && !pu.mutation.ReactionTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionTemplatesTable,
			Columns: []string{poll.ReactionTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reactiontemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReactionTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionTemplatesTable,
			Columns: []string{poll.ReactionTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reactiontemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionsTable,
			Columns: []string{poll.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedReactionsIDs(); len(nodes) > 0 && !pu.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionsTable,
			Columns: []string{poll.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.ReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionsTable,
			Columns: []string{poll.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PollUpdateOne is the builder for updating a single Poll entity.
type PollUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PollMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PollUpdateOne) SetUpdatedAt(t time.Time) *PollUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetIsDeleted sets the "is_deleted" field.
func (puo *PollUpdateOne) SetIsDeleted(b bool) *PollUpdateOne {
	puo.mutation.SetIsDeleted(b)
	return puo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableIsDeleted(b *bool) *PollUpdateOne {
	if b != nil {
		puo.SetIsDeleted(*b)
	}
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PollUpdateOne) SetDeletedAt(t time.Time) *PollUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetTitle sets the "title" field.
func (puo *PollUpdateOne) SetTitle(s string) *PollUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetDescription sets the "description" field.
func (puo *PollUpdateOne) SetDescription(s string) *PollUpdateOne {
	puo.mutation.SetDescription(s)
	return puo
}

// SetIsLive sets the "is_live" field.
func (puo *PollUpdateOne) SetIsLive(b bool) *PollUpdateOne {
	puo.mutation.SetIsLive(b)
	return puo
}

// SetNillableIsLive sets the "is_live" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableIsLive(b *bool) *PollUpdateOne {
	if b != nil {
		puo.SetIsLive(*b)
	}
	return puo
}

// SetCanVote sets the "can_vote" field.
func (puo *PollUpdateOne) SetCanVote(b bool) *PollUpdateOne {
	puo.mutation.SetCanVote(b)
	return puo
}

// SetNillableCanVote sets the "can_vote" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableCanVote(b *bool) *PollUpdateOne {
	if b != nil {
		puo.SetCanVote(*b)
	}
	return puo
}

// SetCanReact sets the "can_react" field.
func (puo *PollUpdateOne) SetCanReact(b bool) *PollUpdateOne {
	puo.mutation.SetCanReact(b)
	return puo
}

// SetNillableCanReact sets the "can_react" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableCanReact(b *bool) *PollUpdateOne {
	if b != nil {
		puo.SetCanReact(*b)
	}
	return puo
}

// SetCanSeeResults sets the "can_see_results" field.
func (puo *PollUpdateOne) SetCanSeeResults(b bool) *PollUpdateOne {
	puo.mutation.SetCanSeeResults(b)
	return puo
}

// SetNillableCanSeeResults sets the "can_see_results" field if the given value is not nil.
func (puo *PollUpdateOne) SetNillableCanSeeResults(b *bool) *PollUpdateOne {
	if b != nil {
		puo.SetCanSeeResults(*b)
	}
	return puo
}

// SetPublishedAt sets the "published_at" field.
func (puo *PollUpdateOne) SetPublishedAt(t time.Time) *PollUpdateOne {
	puo.mutation.SetPublishedAt(t)
	return puo
}

// SetUnpublishedAt sets the "unpublished_at" field.
func (puo *PollUpdateOne) SetUnpublishedAt(t time.Time) *PollUpdateOne {
	puo.mutation.SetUnpublishedAt(t)
	return puo
}

// AddVoteTemplateIDs adds the "vote_templates" edge to the VoteTemplate entity by IDs.
func (puo *PollUpdateOne) AddVoteTemplateIDs(ids ...int) *PollUpdateOne {
	puo.mutation.AddVoteTemplateIDs(ids...)
	return puo
}

// AddVoteTemplates adds the "vote_templates" edges to the VoteTemplate entity.
func (puo *PollUpdateOne) AddVoteTemplates(v ...*VoteTemplate) *PollUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.AddVoteTemplateIDs(ids...)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (puo *PollUpdateOne) AddVoteIDs(ids ...int) *PollUpdateOne {
	puo.mutation.AddVoteIDs(ids...)
	return puo
}

// AddVotes adds the "votes" edges to the Vote entity.
func (puo *PollUpdateOne) AddVotes(v ...*Vote) *PollUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.AddVoteIDs(ids...)
}

// AddReactionTemplateIDs adds the "reaction_templates" edge to the ReactionTemplate entity by IDs.
func (puo *PollUpdateOne) AddReactionTemplateIDs(ids ...int) *PollUpdateOne {
	puo.mutation.AddReactionTemplateIDs(ids...)
	return puo
}

// AddReactionTemplates adds the "reaction_templates" edges to the ReactionTemplate entity.
func (puo *PollUpdateOne) AddReactionTemplates(r ...*ReactionTemplate) *PollUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddReactionTemplateIDs(ids...)
}

// AddReactionIDs adds the "reactions" edge to the Reaction entity by IDs.
func (puo *PollUpdateOne) AddReactionIDs(ids ...int) *PollUpdateOne {
	puo.mutation.AddReactionIDs(ids...)
	return puo
}

// AddReactions adds the "reactions" edges to the Reaction entity.
func (puo *PollUpdateOne) AddReactions(r ...*Reaction) *PollUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddReactionIDs(ids...)
}

// Mutation returns the PollMutation object of the builder.
func (puo *PollUpdateOne) Mutation() *PollMutation {
	return puo.mutation
}

// ClearVoteTemplates clears all "vote_templates" edges to the VoteTemplate entity.
func (puo *PollUpdateOne) ClearVoteTemplates() *PollUpdateOne {
	puo.mutation.ClearVoteTemplates()
	return puo
}

// RemoveVoteTemplateIDs removes the "vote_templates" edge to VoteTemplate entities by IDs.
func (puo *PollUpdateOne) RemoveVoteTemplateIDs(ids ...int) *PollUpdateOne {
	puo.mutation.RemoveVoteTemplateIDs(ids...)
	return puo
}

// RemoveVoteTemplates removes "vote_templates" edges to VoteTemplate entities.
func (puo *PollUpdateOne) RemoveVoteTemplates(v ...*VoteTemplate) *PollUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.RemoveVoteTemplateIDs(ids...)
}

// ClearVotes clears all "votes" edges to the Vote entity.
func (puo *PollUpdateOne) ClearVotes() *PollUpdateOne {
	puo.mutation.ClearVotes()
	return puo
}

// RemoveVoteIDs removes the "votes" edge to Vote entities by IDs.
func (puo *PollUpdateOne) RemoveVoteIDs(ids ...int) *PollUpdateOne {
	puo.mutation.RemoveVoteIDs(ids...)
	return puo
}

// RemoveVotes removes "votes" edges to Vote entities.
func (puo *PollUpdateOne) RemoveVotes(v ...*Vote) *PollUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return puo.RemoveVoteIDs(ids...)
}

// ClearReactionTemplates clears all "reaction_templates" edges to the ReactionTemplate entity.
func (puo *PollUpdateOne) ClearReactionTemplates() *PollUpdateOne {
	puo.mutation.ClearReactionTemplates()
	return puo
}

// RemoveReactionTemplateIDs removes the "reaction_templates" edge to ReactionTemplate entities by IDs.
func (puo *PollUpdateOne) RemoveReactionTemplateIDs(ids ...int) *PollUpdateOne {
	puo.mutation.RemoveReactionTemplateIDs(ids...)
	return puo
}

// RemoveReactionTemplates removes "reaction_templates" edges to ReactionTemplate entities.
func (puo *PollUpdateOne) RemoveReactionTemplates(r ...*ReactionTemplate) *PollUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveReactionTemplateIDs(ids...)
}

// ClearReactions clears all "reactions" edges to the Reaction entity.
func (puo *PollUpdateOne) ClearReactions() *PollUpdateOne {
	puo.mutation.ClearReactions()
	return puo
}

// RemoveReactionIDs removes the "reactions" edge to Reaction entities by IDs.
func (puo *PollUpdateOne) RemoveReactionIDs(ids ...int) *PollUpdateOne {
	puo.mutation.RemoveReactionIDs(ids...)
	return puo
}

// RemoveReactions removes "reactions" edges to Reaction entities.
func (puo *PollUpdateOne) RemoveReactions(r ...*Reaction) *PollUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemoveReactionIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PollUpdateOne) Select(field string, fields ...string) *PollUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Poll entity.
func (puo *PollUpdateOne) Save(ctx context.Context) (*Poll, error) {
	var (
		err  error
		node *Poll
	)
	puo.defaults()
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PollMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Poll)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PollMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PollUpdateOne) SaveX(ctx context.Context) *Poll {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PollUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PollUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PollUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := poll.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PollUpdateOne) check() error {
	if v, ok := puo.mutation.Title(); ok {
		if err := poll.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Poll.title": %w`, err)}
		}
	}
	return nil
}

func (puo *PollUpdateOne) sqlSave(ctx context.Context) (_node *Poll, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   poll.Table,
			Columns: poll.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: poll.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Poll.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, poll.FieldID)
		for _, f := range fields {
			if !poll.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != poll.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(poll.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.IsDeleted(); ok {
		_spec.SetField(poll.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(poll.FieldDeletedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.SetField(poll.FieldTitle, field.TypeString, value)
	}
	if value, ok := puo.mutation.Description(); ok {
		_spec.SetField(poll.FieldDescription, field.TypeString, value)
	}
	if value, ok := puo.mutation.IsLive(); ok {
		_spec.SetField(poll.FieldIsLive, field.TypeBool, value)
	}
	if value, ok := puo.mutation.CanVote(); ok {
		_spec.SetField(poll.FieldCanVote, field.TypeBool, value)
	}
	if value, ok := puo.mutation.CanReact(); ok {
		_spec.SetField(poll.FieldCanReact, field.TypeBool, value)
	}
	if value, ok := puo.mutation.CanSeeResults(); ok {
		_spec.SetField(poll.FieldCanSeeResults, field.TypeBool, value)
	}
	if value, ok := puo.mutation.PublishedAt(); ok {
		_spec.SetField(poll.FieldPublishedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.UnpublishedAt(); ok {
		_spec.SetField(poll.FieldUnpublishedAt, field.TypeTime, value)
	}
	if puo.mutation.VoteTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VoteTemplatesTable,
			Columns: []string{poll.VoteTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: votetemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedVoteTemplatesIDs(); len(nodes) > 0 && !puo.mutation.VoteTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VoteTemplatesTable,
			Columns: []string{poll.VoteTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: votetemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VoteTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VoteTemplatesTable,
			Columns: []string{poll.VoteTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: votetemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vote.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedVotesIDs(); len(nodes) > 0 && !puo.mutation.VotesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ReactionTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionTemplatesTable,
			Columns: []string{poll.ReactionTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reactiontemplate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedReactionTemplatesIDs(); len(nodes) > 0 && !puo.mutation.ReactionTemplatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionTemplatesTable,
			Columns: []string{poll.ReactionTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reactiontemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReactionTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionTemplatesTable,
			Columns: []string{poll.ReactionTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reactiontemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionsTable,
			Columns: []string{poll.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedReactionsIDs(); len(nodes) > 0 && !puo.mutation.ReactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionsTable,
			Columns: []string{poll.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.ReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionsTable,
			Columns: []string{poll.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Poll{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{poll.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
