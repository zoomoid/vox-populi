// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/poll"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/predicate"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/reaction"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/reactiontemplate"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/vote"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/votetemplate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePoll             = "Poll"
	TypeReaction         = "Reaction"
	TypeReactionTemplate = "ReactionTemplate"
	TypeVote             = "Vote"
	TypeVoteTemplate     = "VoteTemplate"
)

// PollMutation represents an operation that mutates the Poll nodes in the graph.
type PollMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	created_at                *time.Time
	updated_at                *time.Time
	is_deleted                *bool
	deleted_at                *time.Time
	title                     *string
	description               *string
	is_live                   *bool
	can_vote                  *bool
	can_react                 *bool
	can_see_results           *bool
	published_at              *time.Time
	unpublished_at            *time.Time
	clearedFields             map[string]struct{}
	vote_templates            map[int]struct{}
	removedvote_templates     map[int]struct{}
	clearedvote_templates     bool
	votes                     map[int]struct{}
	removedvotes              map[int]struct{}
	clearedvotes              bool
	reaction_templates        map[int]struct{}
	removedreaction_templates map[int]struct{}
	clearedreaction_templates bool
	reactions                 map[int]struct{}
	removedreactions          map[int]struct{}
	clearedreactions          bool
	done                      bool
	oldValue                  func(context.Context) (*Poll, error)
	predicates                []predicate.Poll
}

var _ ent.Mutation = (*PollMutation)(nil)

// pollOption allows management of the mutation configuration using functional options.
type pollOption func(*PollMutation)

// newPollMutation creates new mutation for the Poll entity.
func newPollMutation(c config, op Op, opts ...pollOption) *PollMutation {
	m := &PollMutation{
		config:        c,
		op:            op,
		typ:           TypePoll,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPollID sets the ID field of the mutation.
func withPollID(id int) pollOption {
	return func(m *PollMutation) {
		var (
			err   error
			once  sync.Once
			value *Poll
		)
		m.oldValue = func(ctx context.Context) (*Poll, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Poll.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPoll sets the old Poll of the mutation.
func withPoll(node *Poll) pollOption {
	return func(m *PollMutation) {
		m.oldValue = func(context.Context) (*Poll, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PollMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PollMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PollMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PollMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Poll.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PollMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PollMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PollMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PollMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PollMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PollMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetIsDeleted sets the "is_deleted" field.
func (m *PollMutation) SetIsDeleted(b bool) {
	m.is_deleted = &b
}

// IsDeleted returns the value of the "is_deleted" field in the mutation.
func (m *PollMutation) IsDeleted() (r bool, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old "is_deleted" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldIsDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// ResetIsDeleted resets all changes to the "is_deleted" field.
func (m *PollMutation) ResetIsDeleted() {
	m.is_deleted = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PollMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PollMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PollMutation) ResetDeletedAt() {
	m.deleted_at = nil
}

// SetTitle sets the "title" field.
func (m *PollMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *PollMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *PollMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *PollMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PollMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *PollMutation) ResetDescription() {
	m.description = nil
}

// SetIsLive sets the "is_live" field.
func (m *PollMutation) SetIsLive(b bool) {
	m.is_live = &b
}

// IsLive returns the value of the "is_live" field in the mutation.
func (m *PollMutation) IsLive() (r bool, exists bool) {
	v := m.is_live
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLive returns the old "is_live" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldIsLive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLive: %w", err)
	}
	return oldValue.IsLive, nil
}

// ResetIsLive resets all changes to the "is_live" field.
func (m *PollMutation) ResetIsLive() {
	m.is_live = nil
}

// SetCanVote sets the "can_vote" field.
func (m *PollMutation) SetCanVote(b bool) {
	m.can_vote = &b
}

// CanVote returns the value of the "can_vote" field in the mutation.
func (m *PollMutation) CanVote() (r bool, exists bool) {
	v := m.can_vote
	if v == nil {
		return
	}
	return *v, true
}

// OldCanVote returns the old "can_vote" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldCanVote(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCanVote is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCanVote requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCanVote: %w", err)
	}
	return oldValue.CanVote, nil
}

// ResetCanVote resets all changes to the "can_vote" field.
func (m *PollMutation) ResetCanVote() {
	m.can_vote = nil
}

// SetCanReact sets the "can_react" field.
func (m *PollMutation) SetCanReact(b bool) {
	m.can_react = &b
}

// CanReact returns the value of the "can_react" field in the mutation.
func (m *PollMutation) CanReact() (r bool, exists bool) {
	v := m.can_react
	if v == nil {
		return
	}
	return *v, true
}

// OldCanReact returns the old "can_react" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldCanReact(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCanReact is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCanReact requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCanReact: %w", err)
	}
	return oldValue.CanReact, nil
}

// ResetCanReact resets all changes to the "can_react" field.
func (m *PollMutation) ResetCanReact() {
	m.can_react = nil
}

// SetCanSeeResults sets the "can_see_results" field.
func (m *PollMutation) SetCanSeeResults(b bool) {
	m.can_see_results = &b
}

// CanSeeResults returns the value of the "can_see_results" field in the mutation.
func (m *PollMutation) CanSeeResults() (r bool, exists bool) {
	v := m.can_see_results
	if v == nil {
		return
	}
	return *v, true
}

// OldCanSeeResults returns the old "can_see_results" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldCanSeeResults(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCanSeeResults is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCanSeeResults requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCanSeeResults: %w", err)
	}
	return oldValue.CanSeeResults, nil
}

// ResetCanSeeResults resets all changes to the "can_see_results" field.
func (m *PollMutation) ResetCanSeeResults() {
	m.can_see_results = nil
}

// SetPublishedAt sets the "published_at" field.
func (m *PollMutation) SetPublishedAt(t time.Time) {
	m.published_at = &t
}

// PublishedAt returns the value of the "published_at" field in the mutation.
func (m *PollMutation) PublishedAt() (r time.Time, exists bool) {
	v := m.published_at
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedAt returns the old "published_at" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldPublishedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedAt: %w", err)
	}
	return oldValue.PublishedAt, nil
}

// ResetPublishedAt resets all changes to the "published_at" field.
func (m *PollMutation) ResetPublishedAt() {
	m.published_at = nil
}

// SetUnpublishedAt sets the "unpublished_at" field.
func (m *PollMutation) SetUnpublishedAt(t time.Time) {
	m.unpublished_at = &t
}

// UnpublishedAt returns the value of the "unpublished_at" field in the mutation.
func (m *PollMutation) UnpublishedAt() (r time.Time, exists bool) {
	v := m.unpublished_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUnpublishedAt returns the old "unpublished_at" field's value of the Poll entity.
// If the Poll object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PollMutation) OldUnpublishedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUnpublishedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUnpublishedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUnpublishedAt: %w", err)
	}
	return oldValue.UnpublishedAt, nil
}

// ResetUnpublishedAt resets all changes to the "unpublished_at" field.
func (m *PollMutation) ResetUnpublishedAt() {
	m.unpublished_at = nil
}

// AddVoteTemplateIDs adds the "vote_templates" edge to the VoteTemplate entity by ids.
func (m *PollMutation) AddVoteTemplateIDs(ids ...int) {
	if m.vote_templates == nil {
		m.vote_templates = make(map[int]struct{})
	}
	for i := range ids {
		m.vote_templates[ids[i]] = struct{}{}
	}
}

// ClearVoteTemplates clears the "vote_templates" edge to the VoteTemplate entity.
func (m *PollMutation) ClearVoteTemplates() {
	m.clearedvote_templates = true
}

// VoteTemplatesCleared reports if the "vote_templates" edge to the VoteTemplate entity was cleared.
func (m *PollMutation) VoteTemplatesCleared() bool {
	return m.clearedvote_templates
}

// RemoveVoteTemplateIDs removes the "vote_templates" edge to the VoteTemplate entity by IDs.
func (m *PollMutation) RemoveVoteTemplateIDs(ids ...int) {
	if m.removedvote_templates == nil {
		m.removedvote_templates = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.vote_templates, ids[i])
		m.removedvote_templates[ids[i]] = struct{}{}
	}
}

// RemovedVoteTemplates returns the removed IDs of the "vote_templates" edge to the VoteTemplate entity.
func (m *PollMutation) RemovedVoteTemplatesIDs() (ids []int) {
	for id := range m.removedvote_templates {
		ids = append(ids, id)
	}
	return
}

// VoteTemplatesIDs returns the "vote_templates" edge IDs in the mutation.
func (m *PollMutation) VoteTemplatesIDs() (ids []int) {
	for id := range m.vote_templates {
		ids = append(ids, id)
	}
	return
}

// ResetVoteTemplates resets all changes to the "vote_templates" edge.
func (m *PollMutation) ResetVoteTemplates() {
	m.vote_templates = nil
	m.clearedvote_templates = false
	m.removedvote_templates = nil
}

// AddVoteIDs adds the "votes" edge to the Vote entity by ids.
func (m *PollMutation) AddVoteIDs(ids ...int) {
	if m.votes == nil {
		m.votes = make(map[int]struct{})
	}
	for i := range ids {
		m.votes[ids[i]] = struct{}{}
	}
}

// ClearVotes clears the "votes" edge to the Vote entity.
func (m *PollMutation) ClearVotes() {
	m.clearedvotes = true
}

// VotesCleared reports if the "votes" edge to the Vote entity was cleared.
func (m *PollMutation) VotesCleared() bool {
	return m.clearedvotes
}

// RemoveVoteIDs removes the "votes" edge to the Vote entity by IDs.
func (m *PollMutation) RemoveVoteIDs(ids ...int) {
	if m.removedvotes == nil {
		m.removedvotes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.votes, ids[i])
		m.removedvotes[ids[i]] = struct{}{}
	}
}

// RemovedVotes returns the removed IDs of the "votes" edge to the Vote entity.
func (m *PollMutation) RemovedVotesIDs() (ids []int) {
	for id := range m.removedvotes {
		ids = append(ids, id)
	}
	return
}

// VotesIDs returns the "votes" edge IDs in the mutation.
func (m *PollMutation) VotesIDs() (ids []int) {
	for id := range m.votes {
		ids = append(ids, id)
	}
	return
}

// ResetVotes resets all changes to the "votes" edge.
func (m *PollMutation) ResetVotes() {
	m.votes = nil
	m.clearedvotes = false
	m.removedvotes = nil
}

// AddReactionTemplateIDs adds the "reaction_templates" edge to the ReactionTemplate entity by ids.
func (m *PollMutation) AddReactionTemplateIDs(ids ...int) {
	if m.reaction_templates == nil {
		m.reaction_templates = make(map[int]struct{})
	}
	for i := range ids {
		m.reaction_templates[ids[i]] = struct{}{}
	}
}

// ClearReactionTemplates clears the "reaction_templates" edge to the ReactionTemplate entity.
func (m *PollMutation) ClearReactionTemplates() {
	m.clearedreaction_templates = true
}

// ReactionTemplatesCleared reports if the "reaction_templates" edge to the ReactionTemplate entity was cleared.
func (m *PollMutation) ReactionTemplatesCleared() bool {
	return m.clearedreaction_templates
}

// RemoveReactionTemplateIDs removes the "reaction_templates" edge to the ReactionTemplate entity by IDs.
func (m *PollMutation) RemoveReactionTemplateIDs(ids ...int) {
	if m.removedreaction_templates == nil {
		m.removedreaction_templates = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.reaction_templates, ids[i])
		m.removedreaction_templates[ids[i]] = struct{}{}
	}
}

// RemovedReactionTemplates returns the removed IDs of the "reaction_templates" edge to the ReactionTemplate entity.
func (m *PollMutation) RemovedReactionTemplatesIDs() (ids []int) {
	for id := range m.removedreaction_templates {
		ids = append(ids, id)
	}
	return
}

// ReactionTemplatesIDs returns the "reaction_templates" edge IDs in the mutation.
func (m *PollMutation) ReactionTemplatesIDs() (ids []int) {
	for id := range m.reaction_templates {
		ids = append(ids, id)
	}
	return
}

// ResetReactionTemplates resets all changes to the "reaction_templates" edge.
func (m *PollMutation) ResetReactionTemplates() {
	m.reaction_templates = nil
	m.clearedreaction_templates = false
	m.removedreaction_templates = nil
}

// AddReactionIDs adds the "reactions" edge to the Reaction entity by ids.
func (m *PollMutation) AddReactionIDs(ids ...int) {
	if m.reactions == nil {
		m.reactions = make(map[int]struct{})
	}
	for i := range ids {
		m.reactions[ids[i]] = struct{}{}
	}
}

// ClearReactions clears the "reactions" edge to the Reaction entity.
func (m *PollMutation) ClearReactions() {
	m.clearedreactions = true
}

// ReactionsCleared reports if the "reactions" edge to the Reaction entity was cleared.
func (m *PollMutation) ReactionsCleared() bool {
	return m.clearedreactions
}

// RemoveReactionIDs removes the "reactions" edge to the Reaction entity by IDs.
func (m *PollMutation) RemoveReactionIDs(ids ...int) {
	if m.removedreactions == nil {
		m.removedreactions = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.reactions, ids[i])
		m.removedreactions[ids[i]] = struct{}{}
	}
}

// RemovedReactions returns the removed IDs of the "reactions" edge to the Reaction entity.
func (m *PollMutation) RemovedReactionsIDs() (ids []int) {
	for id := range m.removedreactions {
		ids = append(ids, id)
	}
	return
}

// ReactionsIDs returns the "reactions" edge IDs in the mutation.
func (m *PollMutation) ReactionsIDs() (ids []int) {
	for id := range m.reactions {
		ids = append(ids, id)
	}
	return
}

// ResetReactions resets all changes to the "reactions" edge.
func (m *PollMutation) ResetReactions() {
	m.reactions = nil
	m.clearedreactions = false
	m.removedreactions = nil
}

// Where appends a list predicates to the PollMutation builder.
func (m *PollMutation) Where(ps ...predicate.Poll) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PollMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Poll).
func (m *PollMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PollMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, poll.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, poll.FieldUpdatedAt)
	}
	if m.is_deleted != nil {
		fields = append(fields, poll.FieldIsDeleted)
	}
	if m.deleted_at != nil {
		fields = append(fields, poll.FieldDeletedAt)
	}
	if m.title != nil {
		fields = append(fields, poll.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, poll.FieldDescription)
	}
	if m.is_live != nil {
		fields = append(fields, poll.FieldIsLive)
	}
	if m.can_vote != nil {
		fields = append(fields, poll.FieldCanVote)
	}
	if m.can_react != nil {
		fields = append(fields, poll.FieldCanReact)
	}
	if m.can_see_results != nil {
		fields = append(fields, poll.FieldCanSeeResults)
	}
	if m.published_at != nil {
		fields = append(fields, poll.FieldPublishedAt)
	}
	if m.unpublished_at != nil {
		fields = append(fields, poll.FieldUnpublishedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PollMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case poll.FieldCreatedAt:
		return m.CreatedAt()
	case poll.FieldUpdatedAt:
		return m.UpdatedAt()
	case poll.FieldIsDeleted:
		return m.IsDeleted()
	case poll.FieldDeletedAt:
		return m.DeletedAt()
	case poll.FieldTitle:
		return m.Title()
	case poll.FieldDescription:
		return m.Description()
	case poll.FieldIsLive:
		return m.IsLive()
	case poll.FieldCanVote:
		return m.CanVote()
	case poll.FieldCanReact:
		return m.CanReact()
	case poll.FieldCanSeeResults:
		return m.CanSeeResults()
	case poll.FieldPublishedAt:
		return m.PublishedAt()
	case poll.FieldUnpublishedAt:
		return m.UnpublishedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PollMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case poll.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case poll.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case poll.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	case poll.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case poll.FieldTitle:
		return m.OldTitle(ctx)
	case poll.FieldDescription:
		return m.OldDescription(ctx)
	case poll.FieldIsLive:
		return m.OldIsLive(ctx)
	case poll.FieldCanVote:
		return m.OldCanVote(ctx)
	case poll.FieldCanReact:
		return m.OldCanReact(ctx)
	case poll.FieldCanSeeResults:
		return m.OldCanSeeResults(ctx)
	case poll.FieldPublishedAt:
		return m.OldPublishedAt(ctx)
	case poll.FieldUnpublishedAt:
		return m.OldUnpublishedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Poll field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PollMutation) SetField(name string, value ent.Value) error {
	switch name {
	case poll.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case poll.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case poll.FieldIsDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	case poll.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case poll.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case poll.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case poll.FieldIsLive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLive(v)
		return nil
	case poll.FieldCanVote:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCanVote(v)
		return nil
	case poll.FieldCanReact:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCanReact(v)
		return nil
	case poll.FieldCanSeeResults:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCanSeeResults(v)
		return nil
	case poll.FieldPublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedAt(v)
		return nil
	case poll.FieldUnpublishedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUnpublishedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Poll field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PollMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PollMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PollMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Poll numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PollMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PollMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PollMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Poll nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PollMutation) ResetField(name string) error {
	switch name {
	case poll.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case poll.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case poll.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	case poll.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case poll.FieldTitle:
		m.ResetTitle()
		return nil
	case poll.FieldDescription:
		m.ResetDescription()
		return nil
	case poll.FieldIsLive:
		m.ResetIsLive()
		return nil
	case poll.FieldCanVote:
		m.ResetCanVote()
		return nil
	case poll.FieldCanReact:
		m.ResetCanReact()
		return nil
	case poll.FieldCanSeeResults:
		m.ResetCanSeeResults()
		return nil
	case poll.FieldPublishedAt:
		m.ResetPublishedAt()
		return nil
	case poll.FieldUnpublishedAt:
		m.ResetUnpublishedAt()
		return nil
	}
	return fmt.Errorf("unknown Poll field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PollMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.vote_templates != nil {
		edges = append(edges, poll.EdgeVoteTemplates)
	}
	if m.votes != nil {
		edges = append(edges, poll.EdgeVotes)
	}
	if m.reaction_templates != nil {
		edges = append(edges, poll.EdgeReactionTemplates)
	}
	if m.reactions != nil {
		edges = append(edges, poll.EdgeReactions)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PollMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case poll.EdgeVoteTemplates:
		ids := make([]ent.Value, 0, len(m.vote_templates))
		for id := range m.vote_templates {
			ids = append(ids, id)
		}
		return ids
	case poll.EdgeVotes:
		ids := make([]ent.Value, 0, len(m.votes))
		for id := range m.votes {
			ids = append(ids, id)
		}
		return ids
	case poll.EdgeReactionTemplates:
		ids := make([]ent.Value, 0, len(m.reaction_templates))
		for id := range m.reaction_templates {
			ids = append(ids, id)
		}
		return ids
	case poll.EdgeReactions:
		ids := make([]ent.Value, 0, len(m.reactions))
		for id := range m.reactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PollMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedvote_templates != nil {
		edges = append(edges, poll.EdgeVoteTemplates)
	}
	if m.removedvotes != nil {
		edges = append(edges, poll.EdgeVotes)
	}
	if m.removedreaction_templates != nil {
		edges = append(edges, poll.EdgeReactionTemplates)
	}
	if m.removedreactions != nil {
		edges = append(edges, poll.EdgeReactions)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PollMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case poll.EdgeVoteTemplates:
		ids := make([]ent.Value, 0, len(m.removedvote_templates))
		for id := range m.removedvote_templates {
			ids = append(ids, id)
		}
		return ids
	case poll.EdgeVotes:
		ids := make([]ent.Value, 0, len(m.removedvotes))
		for id := range m.removedvotes {
			ids = append(ids, id)
		}
		return ids
	case poll.EdgeReactionTemplates:
		ids := make([]ent.Value, 0, len(m.removedreaction_templates))
		for id := range m.removedreaction_templates {
			ids = append(ids, id)
		}
		return ids
	case poll.EdgeReactions:
		ids := make([]ent.Value, 0, len(m.removedreactions))
		for id := range m.removedreactions {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PollMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedvote_templates {
		edges = append(edges, poll.EdgeVoteTemplates)
	}
	if m.clearedvotes {
		edges = append(edges, poll.EdgeVotes)
	}
	if m.clearedreaction_templates {
		edges = append(edges, poll.EdgeReactionTemplates)
	}
	if m.clearedreactions {
		edges = append(edges, poll.EdgeReactions)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PollMutation) EdgeCleared(name string) bool {
	switch name {
	case poll.EdgeVoteTemplates:
		return m.clearedvote_templates
	case poll.EdgeVotes:
		return m.clearedvotes
	case poll.EdgeReactionTemplates:
		return m.clearedreaction_templates
	case poll.EdgeReactions:
		return m.clearedreactions
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PollMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Poll unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PollMutation) ResetEdge(name string) error {
	switch name {
	case poll.EdgeVoteTemplates:
		m.ResetVoteTemplates()
		return nil
	case poll.EdgeVotes:
		m.ResetVotes()
		return nil
	case poll.EdgeReactionTemplates:
		m.ResetReactionTemplates()
		return nil
	case poll.EdgeReactions:
		m.ResetReactions()
		return nil
	}
	return fmt.Errorf("unknown Poll edge %s", name)
}

// ReactionMutation represents an operation that mutates the Reaction nodes in the graph.
type ReactionMutation struct {
	config
	op              Op
	typ             string
	id              *int
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	template        *int
	clearedtemplate bool
	poll            *int
	clearedpoll     bool
	done            bool
	oldValue        func(context.Context) (*Reaction, error)
	predicates      []predicate.Reaction
}

var _ ent.Mutation = (*ReactionMutation)(nil)

// reactionOption allows management of the mutation configuration using functional options.
type reactionOption func(*ReactionMutation)

// newReactionMutation creates new mutation for the Reaction entity.
func newReactionMutation(c config, op Op, opts ...reactionOption) *ReactionMutation {
	m := &ReactionMutation{
		config:        c,
		op:            op,
		typ:           TypeReaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReactionID sets the ID field of the mutation.
func withReactionID(id int) reactionOption {
	return func(m *ReactionMutation) {
		var (
			err   error
			once  sync.Once
			value *Reaction
		)
		m.oldValue = func(ctx context.Context) (*Reaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Reaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReaction sets the old Reaction of the mutation.
func withReaction(node *Reaction) reactionOption {
	return func(m *ReactionMutation) {
		m.oldValue = func(context.Context) (*Reaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReactionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReactionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Reaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ReactionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ReactionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Reaction entity.
// If the Reaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReactionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ReactionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ReactionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ReactionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Reaction entity.
// If the Reaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReactionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ReactionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetTemplateID sets the "template" edge to the ReactionTemplate entity by id.
func (m *ReactionMutation) SetTemplateID(id int) {
	m.template = &id
}

// ClearTemplate clears the "template" edge to the ReactionTemplate entity.
func (m *ReactionMutation) ClearTemplate() {
	m.clearedtemplate = true
}

// TemplateCleared reports if the "template" edge to the ReactionTemplate entity was cleared.
func (m *ReactionMutation) TemplateCleared() bool {
	return m.clearedtemplate
}

// TemplateID returns the "template" edge ID in the mutation.
func (m *ReactionMutation) TemplateID() (id int, exists bool) {
	if m.template != nil {
		return *m.template, true
	}
	return
}

// TemplateIDs returns the "template" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TemplateID instead. It exists only for internal usage by the builders.
func (m *ReactionMutation) TemplateIDs() (ids []int) {
	if id := m.template; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTemplate resets all changes to the "template" edge.
func (m *ReactionMutation) ResetTemplate() {
	m.template = nil
	m.clearedtemplate = false
}

// SetPollID sets the "poll" edge to the Poll entity by id.
func (m *ReactionMutation) SetPollID(id int) {
	m.poll = &id
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (m *ReactionMutation) ClearPoll() {
	m.clearedpoll = true
}

// PollCleared reports if the "poll" edge to the Poll entity was cleared.
func (m *ReactionMutation) PollCleared() bool {
	return m.clearedpoll
}

// PollID returns the "poll" edge ID in the mutation.
func (m *ReactionMutation) PollID() (id int, exists bool) {
	if m.poll != nil {
		return *m.poll, true
	}
	return
}

// PollIDs returns the "poll" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PollID instead. It exists only for internal usage by the builders.
func (m *ReactionMutation) PollIDs() (ids []int) {
	if id := m.poll; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoll resets all changes to the "poll" edge.
func (m *ReactionMutation) ResetPoll() {
	m.poll = nil
	m.clearedpoll = false
}

// Where appends a list predicates to the ReactionMutation builder.
func (m *ReactionMutation) Where(ps ...predicate.Reaction) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ReactionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Reaction).
func (m *ReactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReactionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.created_at != nil {
		fields = append(fields, reaction.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, reaction.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reaction.FieldCreatedAt:
		return m.CreatedAt()
	case reaction.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reaction.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case reaction.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Reaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reaction.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case reaction.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Reaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReactionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReactionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Reaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReactionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReactionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Reaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReactionMutation) ResetField(name string) error {
	switch name {
	case reaction.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case reaction.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Reaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.template != nil {
		edges = append(edges, reaction.EdgeTemplate)
	}
	if m.poll != nil {
		edges = append(edges, reaction.EdgePoll)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReactionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case reaction.EdgeTemplate:
		if id := m.template; id != nil {
			return []ent.Value{*id}
		}
	case reaction.EdgePoll:
		if id := m.poll; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtemplate {
		edges = append(edges, reaction.EdgeTemplate)
	}
	if m.clearedpoll {
		edges = append(edges, reaction.EdgePoll)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReactionMutation) EdgeCleared(name string) bool {
	switch name {
	case reaction.EdgeTemplate:
		return m.clearedtemplate
	case reaction.EdgePoll:
		return m.clearedpoll
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReactionMutation) ClearEdge(name string) error {
	switch name {
	case reaction.EdgeTemplate:
		m.ClearTemplate()
		return nil
	case reaction.EdgePoll:
		m.ClearPoll()
		return nil
	}
	return fmt.Errorf("unknown Reaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReactionMutation) ResetEdge(name string) error {
	switch name {
	case reaction.EdgeTemplate:
		m.ResetTemplate()
		return nil
	case reaction.EdgePoll:
		m.ResetPoll()
		return nil
	}
	return fmt.Errorf("unknown Reaction edge %s", name)
}

// ReactionTemplateMutation represents an operation that mutates the ReactionTemplate nodes in the graph.
type ReactionTemplateMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	reaction      *string
	clearedFields map[string]struct{}
	poll          *int
	clearedpoll   bool
	done          bool
	oldValue      func(context.Context) (*ReactionTemplate, error)
	predicates    []predicate.ReactionTemplate
}

var _ ent.Mutation = (*ReactionTemplateMutation)(nil)

// reactiontemplateOption allows management of the mutation configuration using functional options.
type reactiontemplateOption func(*ReactionTemplateMutation)

// newReactionTemplateMutation creates new mutation for the ReactionTemplate entity.
func newReactionTemplateMutation(c config, op Op, opts ...reactiontemplateOption) *ReactionTemplateMutation {
	m := &ReactionTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeReactionTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReactionTemplateID sets the ID field of the mutation.
func withReactionTemplateID(id int) reactiontemplateOption {
	return func(m *ReactionTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *ReactionTemplate
		)
		m.oldValue = func(ctx context.Context) (*ReactionTemplate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ReactionTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReactionTemplate sets the old ReactionTemplate of the mutation.
func withReactionTemplate(node *ReactionTemplate) reactiontemplateOption {
	return func(m *ReactionTemplateMutation) {
		m.oldValue = func(context.Context) (*ReactionTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReactionTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReactionTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReactionTemplateMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReactionTemplateMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ReactionTemplate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *ReactionTemplateMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ReactionTemplateMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the ReactionTemplate entity.
// If the ReactionTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReactionTemplateMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ReactionTemplateMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ReactionTemplateMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ReactionTemplateMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the ReactionTemplate entity.
// If the ReactionTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReactionTemplateMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ReactionTemplateMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetReaction sets the "reaction" field.
func (m *ReactionTemplateMutation) SetReaction(s string) {
	m.reaction = &s
}

// Reaction returns the value of the "reaction" field in the mutation.
func (m *ReactionTemplateMutation) Reaction() (r string, exists bool) {
	v := m.reaction
	if v == nil {
		return
	}
	return *v, true
}

// OldReaction returns the old "reaction" field's value of the ReactionTemplate entity.
// If the ReactionTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReactionTemplateMutation) OldReaction(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReaction is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReaction requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReaction: %w", err)
	}
	return oldValue.Reaction, nil
}

// ResetReaction resets all changes to the "reaction" field.
func (m *ReactionTemplateMutation) ResetReaction() {
	m.reaction = nil
}

// SetPollID sets the "poll" edge to the Poll entity by id.
func (m *ReactionTemplateMutation) SetPollID(id int) {
	m.poll = &id
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (m *ReactionTemplateMutation) ClearPoll() {
	m.clearedpoll = true
}

// PollCleared reports if the "poll" edge to the Poll entity was cleared.
func (m *ReactionTemplateMutation) PollCleared() bool {
	return m.clearedpoll
}

// PollID returns the "poll" edge ID in the mutation.
func (m *ReactionTemplateMutation) PollID() (id int, exists bool) {
	if m.poll != nil {
		return *m.poll, true
	}
	return
}

// PollIDs returns the "poll" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PollID instead. It exists only for internal usage by the builders.
func (m *ReactionTemplateMutation) PollIDs() (ids []int) {
	if id := m.poll; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoll resets all changes to the "poll" edge.
func (m *ReactionTemplateMutation) ResetPoll() {
	m.poll = nil
	m.clearedpoll = false
}

// Where appends a list predicates to the ReactionTemplateMutation builder.
func (m *ReactionTemplateMutation) Where(ps ...predicate.ReactionTemplate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ReactionTemplateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ReactionTemplate).
func (m *ReactionTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReactionTemplateMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, reactiontemplate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, reactiontemplate.FieldUpdatedAt)
	}
	if m.reaction != nil {
		fields = append(fields, reactiontemplate.FieldReaction)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReactionTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reactiontemplate.FieldCreatedAt:
		return m.CreatedAt()
	case reactiontemplate.FieldUpdatedAt:
		return m.UpdatedAt()
	case reactiontemplate.FieldReaction:
		return m.Reaction()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReactionTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reactiontemplate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case reactiontemplate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case reactiontemplate.FieldReaction:
		return m.OldReaction(ctx)
	}
	return nil, fmt.Errorf("unknown ReactionTemplate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReactionTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reactiontemplate.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case reactiontemplate.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case reactiontemplate.FieldReaction:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReaction(v)
		return nil
	}
	return fmt.Errorf("unknown ReactionTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReactionTemplateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReactionTemplateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReactionTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ReactionTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReactionTemplateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReactionTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReactionTemplateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ReactionTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReactionTemplateMutation) ResetField(name string) error {
	switch name {
	case reactiontemplate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case reactiontemplate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case reactiontemplate.FieldReaction:
		m.ResetReaction()
		return nil
	}
	return fmt.Errorf("unknown ReactionTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReactionTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.poll != nil {
		edges = append(edges, reactiontemplate.EdgePoll)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReactionTemplateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case reactiontemplate.EdgePoll:
		if id := m.poll; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReactionTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReactionTemplateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReactionTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpoll {
		edges = append(edges, reactiontemplate.EdgePoll)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReactionTemplateMutation) EdgeCleared(name string) bool {
	switch name {
	case reactiontemplate.EdgePoll:
		return m.clearedpoll
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReactionTemplateMutation) ClearEdge(name string) error {
	switch name {
	case reactiontemplate.EdgePoll:
		m.ClearPoll()
		return nil
	}
	return fmt.Errorf("unknown ReactionTemplate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReactionTemplateMutation) ResetEdge(name string) error {
	switch name {
	case reactiontemplate.EdgePoll:
		m.ResetPoll()
		return nil
	}
	return fmt.Errorf("unknown ReactionTemplate edge %s", name)
}

// VoteMutation represents an operation that mutates the Vote nodes in the graph.
type VoteMutation struct {
	config
	op              Op
	typ             string
	id              *int
	created_at      *time.Time
	updated_at      *time.Time
	is_deleted      *bool
	deleted_at      *time.Time
	nonce           *string
	clearedFields   map[string]struct{}
	template        *int
	clearedtemplate bool
	poll            *int
	clearedpoll     bool
	done            bool
	oldValue        func(context.Context) (*Vote, error)
	predicates      []predicate.Vote
}

var _ ent.Mutation = (*VoteMutation)(nil)

// voteOption allows management of the mutation configuration using functional options.
type voteOption func(*VoteMutation)

// newVoteMutation creates new mutation for the Vote entity.
func newVoteMutation(c config, op Op, opts ...voteOption) *VoteMutation {
	m := &VoteMutation{
		config:        c,
		op:            op,
		typ:           TypeVote,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVoteID sets the ID field of the mutation.
func withVoteID(id int) voteOption {
	return func(m *VoteMutation) {
		var (
			err   error
			once  sync.Once
			value *Vote
		)
		m.oldValue = func(ctx context.Context) (*Vote, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Vote.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVote sets the old Vote of the mutation.
func withVote(node *Vote) voteOption {
	return func(m *VoteMutation) {
		m.oldValue = func(context.Context) (*Vote, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VoteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VoteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VoteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VoteMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Vote.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *VoteMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VoteMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Vote entity.
// If the Vote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VoteMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *VoteMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *VoteMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Vote entity.
// If the Vote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *VoteMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetIsDeleted sets the "is_deleted" field.
func (m *VoteMutation) SetIsDeleted(b bool) {
	m.is_deleted = &b
}

// IsDeleted returns the value of the "is_deleted" field in the mutation.
func (m *VoteMutation) IsDeleted() (r bool, exists bool) {
	v := m.is_deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeleted returns the old "is_deleted" field's value of the Vote entity.
// If the Vote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteMutation) OldIsDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsDeleted: %w", err)
	}
	return oldValue.IsDeleted, nil
}

// ResetIsDeleted resets all changes to the "is_deleted" field.
func (m *VoteMutation) ResetIsDeleted() {
	m.is_deleted = nil
}

// SetDeletedAt sets the "deleted_at" field.
func (m *VoteMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *VoteMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Vote entity.
// If the Vote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteMutation) OldDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *VoteMutation) ResetDeletedAt() {
	m.deleted_at = nil
}

// SetNonce sets the "nonce" field.
func (m *VoteMutation) SetNonce(s string) {
	m.nonce = &s
}

// Nonce returns the value of the "nonce" field in the mutation.
func (m *VoteMutation) Nonce() (r string, exists bool) {
	v := m.nonce
	if v == nil {
		return
	}
	return *v, true
}

// OldNonce returns the old "nonce" field's value of the Vote entity.
// If the Vote object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteMutation) OldNonce(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNonce is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNonce requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNonce: %w", err)
	}
	return oldValue.Nonce, nil
}

// ResetNonce resets all changes to the "nonce" field.
func (m *VoteMutation) ResetNonce() {
	m.nonce = nil
}

// SetTemplateID sets the "template" edge to the VoteTemplate entity by id.
func (m *VoteMutation) SetTemplateID(id int) {
	m.template = &id
}

// ClearTemplate clears the "template" edge to the VoteTemplate entity.
func (m *VoteMutation) ClearTemplate() {
	m.clearedtemplate = true
}

// TemplateCleared reports if the "template" edge to the VoteTemplate entity was cleared.
func (m *VoteMutation) TemplateCleared() bool {
	return m.clearedtemplate
}

// TemplateID returns the "template" edge ID in the mutation.
func (m *VoteMutation) TemplateID() (id int, exists bool) {
	if m.template != nil {
		return *m.template, true
	}
	return
}

// TemplateIDs returns the "template" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TemplateID instead. It exists only for internal usage by the builders.
func (m *VoteMutation) TemplateIDs() (ids []int) {
	if id := m.template; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTemplate resets all changes to the "template" edge.
func (m *VoteMutation) ResetTemplate() {
	m.template = nil
	m.clearedtemplate = false
}

// SetPollID sets the "poll" edge to the Poll entity by id.
func (m *VoteMutation) SetPollID(id int) {
	m.poll = &id
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (m *VoteMutation) ClearPoll() {
	m.clearedpoll = true
}

// PollCleared reports if the "poll" edge to the Poll entity was cleared.
func (m *VoteMutation) PollCleared() bool {
	return m.clearedpoll
}

// PollID returns the "poll" edge ID in the mutation.
func (m *VoteMutation) PollID() (id int, exists bool) {
	if m.poll != nil {
		return *m.poll, true
	}
	return
}

// PollIDs returns the "poll" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PollID instead. It exists only for internal usage by the builders.
func (m *VoteMutation) PollIDs() (ids []int) {
	if id := m.poll; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoll resets all changes to the "poll" edge.
func (m *VoteMutation) ResetPoll() {
	m.poll = nil
	m.clearedpoll = false
}

// Where appends a list predicates to the VoteMutation builder.
func (m *VoteMutation) Where(ps ...predicate.Vote) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VoteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Vote).
func (m *VoteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VoteMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, vote.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, vote.FieldUpdatedAt)
	}
	if m.is_deleted != nil {
		fields = append(fields, vote.FieldIsDeleted)
	}
	if m.deleted_at != nil {
		fields = append(fields, vote.FieldDeletedAt)
	}
	if m.nonce != nil {
		fields = append(fields, vote.FieldNonce)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VoteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vote.FieldCreatedAt:
		return m.CreatedAt()
	case vote.FieldUpdatedAt:
		return m.UpdatedAt()
	case vote.FieldIsDeleted:
		return m.IsDeleted()
	case vote.FieldDeletedAt:
		return m.DeletedAt()
	case vote.FieldNonce:
		return m.Nonce()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VoteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vote.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case vote.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case vote.FieldIsDeleted:
		return m.OldIsDeleted(ctx)
	case vote.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case vote.FieldNonce:
		return m.OldNonce(ctx)
	}
	return nil, fmt.Errorf("unknown Vote field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vote.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case vote.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case vote.FieldIsDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsDeleted(v)
		return nil
	case vote.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case vote.FieldNonce:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNonce(v)
		return nil
	}
	return fmt.Errorf("unknown Vote field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VoteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VoteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Vote numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VoteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VoteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VoteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Vote nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VoteMutation) ResetField(name string) error {
	switch name {
	case vote.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case vote.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case vote.FieldIsDeleted:
		m.ResetIsDeleted()
		return nil
	case vote.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case vote.FieldNonce:
		m.ResetNonce()
		return nil
	}
	return fmt.Errorf("unknown Vote field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VoteMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.template != nil {
		edges = append(edges, vote.EdgeTemplate)
	}
	if m.poll != nil {
		edges = append(edges, vote.EdgePoll)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VoteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vote.EdgeTemplate:
		if id := m.template; id != nil {
			return []ent.Value{*id}
		}
	case vote.EdgePoll:
		if id := m.poll; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VoteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VoteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VoteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedtemplate {
		edges = append(edges, vote.EdgeTemplate)
	}
	if m.clearedpoll {
		edges = append(edges, vote.EdgePoll)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VoteMutation) EdgeCleared(name string) bool {
	switch name {
	case vote.EdgeTemplate:
		return m.clearedtemplate
	case vote.EdgePoll:
		return m.clearedpoll
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VoteMutation) ClearEdge(name string) error {
	switch name {
	case vote.EdgeTemplate:
		m.ClearTemplate()
		return nil
	case vote.EdgePoll:
		m.ClearPoll()
		return nil
	}
	return fmt.Errorf("unknown Vote unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VoteMutation) ResetEdge(name string) error {
	switch name {
	case vote.EdgeTemplate:
		m.ResetTemplate()
		return nil
	case vote.EdgePoll:
		m.ResetPoll()
		return nil
	}
	return fmt.Errorf("unknown Vote edge %s", name)
}

// VoteTemplateMutation represents an operation that mutates the VoteTemplate nodes in the graph.
type VoteTemplateMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	answer        *string
	clearedFields map[string]struct{}
	poll          *int
	clearedpoll   bool
	done          bool
	oldValue      func(context.Context) (*VoteTemplate, error)
	predicates    []predicate.VoteTemplate
}

var _ ent.Mutation = (*VoteTemplateMutation)(nil)

// votetemplateOption allows management of the mutation configuration using functional options.
type votetemplateOption func(*VoteTemplateMutation)

// newVoteTemplateMutation creates new mutation for the VoteTemplate entity.
func newVoteTemplateMutation(c config, op Op, opts ...votetemplateOption) *VoteTemplateMutation {
	m := &VoteTemplateMutation{
		config:        c,
		op:            op,
		typ:           TypeVoteTemplate,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVoteTemplateID sets the ID field of the mutation.
func withVoteTemplateID(id int) votetemplateOption {
	return func(m *VoteTemplateMutation) {
		var (
			err   error
			once  sync.Once
			value *VoteTemplate
		)
		m.oldValue = func(ctx context.Context) (*VoteTemplate, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VoteTemplate.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVoteTemplate sets the old VoteTemplate of the mutation.
func withVoteTemplate(node *VoteTemplate) votetemplateOption {
	return func(m *VoteTemplateMutation) {
		m.oldValue = func(context.Context) (*VoteTemplate, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VoteTemplateMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VoteTemplateMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VoteTemplateMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VoteTemplateMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VoteTemplate.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *VoteTemplateMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VoteTemplateMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the VoteTemplate entity.
// If the VoteTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteTemplateMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VoteTemplateMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *VoteTemplateMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *VoteTemplateMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the VoteTemplate entity.
// If the VoteTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteTemplateMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *VoteTemplateMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetAnswer sets the "answer" field.
func (m *VoteTemplateMutation) SetAnswer(s string) {
	m.answer = &s
}

// Answer returns the value of the "answer" field in the mutation.
func (m *VoteTemplateMutation) Answer() (r string, exists bool) {
	v := m.answer
	if v == nil {
		return
	}
	return *v, true
}

// OldAnswer returns the old "answer" field's value of the VoteTemplate entity.
// If the VoteTemplate object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoteTemplateMutation) OldAnswer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAnswer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAnswer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAnswer: %w", err)
	}
	return oldValue.Answer, nil
}

// ResetAnswer resets all changes to the "answer" field.
func (m *VoteTemplateMutation) ResetAnswer() {
	m.answer = nil
}

// SetPollID sets the "poll" edge to the Poll entity by id.
func (m *VoteTemplateMutation) SetPollID(id int) {
	m.poll = &id
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (m *VoteTemplateMutation) ClearPoll() {
	m.clearedpoll = true
}

// PollCleared reports if the "poll" edge to the Poll entity was cleared.
func (m *VoteTemplateMutation) PollCleared() bool {
	return m.clearedpoll
}

// PollID returns the "poll" edge ID in the mutation.
func (m *VoteTemplateMutation) PollID() (id int, exists bool) {
	if m.poll != nil {
		return *m.poll, true
	}
	return
}

// PollIDs returns the "poll" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PollID instead. It exists only for internal usage by the builders.
func (m *VoteTemplateMutation) PollIDs() (ids []int) {
	if id := m.poll; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPoll resets all changes to the "poll" edge.
func (m *VoteTemplateMutation) ResetPoll() {
	m.poll = nil
	m.clearedpoll = false
}

// Where appends a list predicates to the VoteTemplateMutation builder.
func (m *VoteTemplateMutation) Where(ps ...predicate.VoteTemplate) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VoteTemplateMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (VoteTemplate).
func (m *VoteTemplateMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VoteTemplateMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.created_at != nil {
		fields = append(fields, votetemplate.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, votetemplate.FieldUpdatedAt)
	}
	if m.answer != nil {
		fields = append(fields, votetemplate.FieldAnswer)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VoteTemplateMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case votetemplate.FieldCreatedAt:
		return m.CreatedAt()
	case votetemplate.FieldUpdatedAt:
		return m.UpdatedAt()
	case votetemplate.FieldAnswer:
		return m.Answer()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VoteTemplateMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case votetemplate.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case votetemplate.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case votetemplate.FieldAnswer:
		return m.OldAnswer(ctx)
	}
	return nil, fmt.Errorf("unknown VoteTemplate field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoteTemplateMutation) SetField(name string, value ent.Value) error {
	switch name {
	case votetemplate.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case votetemplate.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case votetemplate.FieldAnswer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAnswer(v)
		return nil
	}
	return fmt.Errorf("unknown VoteTemplate field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VoteTemplateMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VoteTemplateMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoteTemplateMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown VoteTemplate numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VoteTemplateMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VoteTemplateMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VoteTemplateMutation) ClearField(name string) error {
	return fmt.Errorf("unknown VoteTemplate nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VoteTemplateMutation) ResetField(name string) error {
	switch name {
	case votetemplate.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case votetemplate.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case votetemplate.FieldAnswer:
		m.ResetAnswer()
		return nil
	}
	return fmt.Errorf("unknown VoteTemplate field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VoteTemplateMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.poll != nil {
		edges = append(edges, votetemplate.EdgePoll)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VoteTemplateMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case votetemplate.EdgePoll:
		if id := m.poll; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VoteTemplateMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VoteTemplateMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VoteTemplateMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedpoll {
		edges = append(edges, votetemplate.EdgePoll)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VoteTemplateMutation) EdgeCleared(name string) bool {
	switch name {
	case votetemplate.EdgePoll:
		return m.clearedpoll
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VoteTemplateMutation) ClearEdge(name string) error {
	switch name {
	case votetemplate.EdgePoll:
		m.ClearPoll()
		return nil
	}
	return fmt.Errorf("unknown VoteTemplate unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VoteTemplateMutation) ResetEdge(name string) error {
	switch name {
	case votetemplate.EdgePoll:
		m.ResetPoll()
		return nil
	}
	return fmt.Errorf("unknown VoteTemplate edge %s", name)
}
