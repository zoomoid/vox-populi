// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/poll"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/reactiontemplate"
)

// ReactionTemplateCreate is the builder for creating a ReactionTemplate entity.
type ReactionTemplateCreate struct {
	config
	mutation *ReactionTemplateMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rtc *ReactionTemplateCreate) SetCreatedAt(t time.Time) *ReactionTemplateCreate {
	rtc.mutation.SetCreatedAt(t)
	return rtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rtc *ReactionTemplateCreate) SetNillableCreatedAt(t *time.Time) *ReactionTemplateCreate {
	if t != nil {
		rtc.SetCreatedAt(*t)
	}
	return rtc
}

// SetUpdatedAt sets the "updated_at" field.
func (rtc *ReactionTemplateCreate) SetUpdatedAt(t time.Time) *ReactionTemplateCreate {
	rtc.mutation.SetUpdatedAt(t)
	return rtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rtc *ReactionTemplateCreate) SetNillableUpdatedAt(t *time.Time) *ReactionTemplateCreate {
	if t != nil {
		rtc.SetUpdatedAt(*t)
	}
	return rtc
}

// SetReaction sets the "reaction" field.
func (rtc *ReactionTemplateCreate) SetReaction(s string) *ReactionTemplateCreate {
	rtc.mutation.SetReaction(s)
	return rtc
}

// SetPollID sets the "poll" edge to the Poll entity by ID.
func (rtc *ReactionTemplateCreate) SetPollID(id int) *ReactionTemplateCreate {
	rtc.mutation.SetPollID(id)
	return rtc
}

// SetNillablePollID sets the "poll" edge to the Poll entity by ID if the given value is not nil.
func (rtc *ReactionTemplateCreate) SetNillablePollID(id *int) *ReactionTemplateCreate {
	if id != nil {
		rtc = rtc.SetPollID(*id)
	}
	return rtc
}

// SetPoll sets the "poll" edge to the Poll entity.
func (rtc *ReactionTemplateCreate) SetPoll(p *Poll) *ReactionTemplateCreate {
	return rtc.SetPollID(p.ID)
}

// Mutation returns the ReactionTemplateMutation object of the builder.
func (rtc *ReactionTemplateCreate) Mutation() *ReactionTemplateMutation {
	return rtc.mutation
}

// Save creates the ReactionTemplate in the database.
func (rtc *ReactionTemplateCreate) Save(ctx context.Context) (*ReactionTemplate, error) {
	var (
		err  error
		node *ReactionTemplate
	)
	rtc.defaults()
	if len(rtc.hooks) == 0 {
		if err = rtc.check(); err != nil {
			return nil, err
		}
		node, err = rtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReactionTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtc.check(); err != nil {
				return nil, err
			}
			rtc.mutation = mutation
			if node, err = rtc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rtc.hooks) - 1; i >= 0; i-- {
			if rtc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rtc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rtc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ReactionTemplate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReactionTemplateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rtc *ReactionTemplateCreate) SaveX(ctx context.Context) *ReactionTemplate {
	v, err := rtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtc *ReactionTemplateCreate) Exec(ctx context.Context) error {
	_, err := rtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtc *ReactionTemplateCreate) ExecX(ctx context.Context) {
	if err := rtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtc *ReactionTemplateCreate) defaults() {
	if _, ok := rtc.mutation.CreatedAt(); !ok {
		v := reactiontemplate.DefaultCreatedAt()
		rtc.mutation.SetCreatedAt(v)
	}
	if _, ok := rtc.mutation.UpdatedAt(); !ok {
		v := reactiontemplate.DefaultUpdatedAt()
		rtc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtc *ReactionTemplateCreate) check() error {
	if _, ok := rtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ReactionTemplate.created_at"`)}
	}
	if _, ok := rtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ReactionTemplate.updated_at"`)}
	}
	if _, ok := rtc.mutation.Reaction(); !ok {
		return &ValidationError{Name: "reaction", err: errors.New(`ent: missing required field "ReactionTemplate.reaction"`)}
	}
	if v, ok := rtc.mutation.Reaction(); ok {
		if err := reactiontemplate.ReactionValidator(v); err != nil {
			return &ValidationError{Name: "reaction", err: fmt.Errorf(`ent: validator failed for field "ReactionTemplate.reaction": %w`, err)}
		}
	}
	return nil
}

func (rtc *ReactionTemplateCreate) sqlSave(ctx context.Context) (*ReactionTemplate, error) {
	_node, _spec := rtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rtc *ReactionTemplateCreate) createSpec() (*ReactionTemplate, *sqlgraph.CreateSpec) {
	var (
		_node = &ReactionTemplate{config: rtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: reactiontemplate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reactiontemplate.FieldID,
			},
		}
	)
	if value, ok := rtc.mutation.CreatedAt(); ok {
		_spec.SetField(reactiontemplate.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rtc.mutation.UpdatedAt(); ok {
		_spec.SetField(reactiontemplate.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rtc.mutation.Reaction(); ok {
		_spec.SetField(reactiontemplate.FieldReaction, field.TypeString, value)
		_node.Reaction = value
	}
	if nodes := rtc.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reactiontemplate.PollTable,
			Columns: []string{reactiontemplate.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: poll.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.poll_reaction_templates = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ReactionTemplateCreateBulk is the builder for creating many ReactionTemplate entities in bulk.
type ReactionTemplateCreateBulk struct {
	config
	builders []*ReactionTemplateCreate
}

// Save creates the ReactionTemplate entities in the database.
func (rtcb *ReactionTemplateCreateBulk) Save(ctx context.Context) ([]*ReactionTemplate, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rtcb.builders))
	nodes := make([]*ReactionTemplate, len(rtcb.builders))
	mutators := make([]Mutator, len(rtcb.builders))
	for i := range rtcb.builders {
		func(i int, root context.Context) {
			builder := rtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReactionTemplateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rtcb *ReactionTemplateCreateBulk) SaveX(ctx context.Context) []*ReactionTemplate {
	v, err := rtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rtcb *ReactionTemplateCreateBulk) Exec(ctx context.Context) error {
	_, err := rtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtcb *ReactionTemplateCreateBulk) ExecX(ctx context.Context) {
	if err := rtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
