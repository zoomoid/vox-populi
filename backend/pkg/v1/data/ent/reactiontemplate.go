// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/poll"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/reactiontemplate"
)

// ReactionTemplate is the model entity for the ReactionTemplate schema.
type ReactionTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Reaction holds the value of the "reaction" field.
	Reaction string `json:"reaction,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReactionTemplateQuery when eager-loading is set.
	Edges                   ReactionTemplateEdges `json:"edges"`
	poll_reaction_templates *int
}

// ReactionTemplateEdges holds the relations/edges for other nodes in the graph.
type ReactionTemplateEdges struct {
	// Poll holds the value of the poll edge.
	Poll *Poll `json:"poll,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PollOrErr returns the Poll value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ReactionTemplateEdges) PollOrErr() (*Poll, error) {
	if e.loadedTypes[0] {
		if e.Poll == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: poll.Label}
		}
		return e.Poll, nil
	}
	return nil, &NotLoadedError{edge: "poll"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ReactionTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reactiontemplate.FieldID:
			values[i] = new(sql.NullInt64)
		case reactiontemplate.FieldReaction:
			values[i] = new(sql.NullString)
		case reactiontemplate.FieldCreatedAt, reactiontemplate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case reactiontemplate.ForeignKeys[0]: // poll_reaction_templates
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ReactionTemplate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ReactionTemplate fields.
func (rt *ReactionTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reactiontemplate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rt.ID = int(value.Int64)
		case reactiontemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rt.CreatedAt = value.Time
			}
		case reactiontemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rt.UpdatedAt = value.Time
			}
		case reactiontemplate.FieldReaction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reaction", values[i])
			} else if value.Valid {
				rt.Reaction = value.String
			}
		case reactiontemplate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field poll_reaction_templates", value)
			} else if value.Valid {
				rt.poll_reaction_templates = new(int)
				*rt.poll_reaction_templates = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPoll queries the "poll" edge of the ReactionTemplate entity.
func (rt *ReactionTemplate) QueryPoll() *PollQuery {
	return (&ReactionTemplateClient{config: rt.config}).QueryPoll(rt)
}

// Update returns a builder for updating this ReactionTemplate.
// Note that you need to call ReactionTemplate.Unwrap() before calling this method if this ReactionTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (rt *ReactionTemplate) Update() *ReactionTemplateUpdateOne {
	return (&ReactionTemplateClient{config: rt.config}).UpdateOne(rt)
}

// Unwrap unwraps the ReactionTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rt *ReactionTemplate) Unwrap() *ReactionTemplate {
	_tx, ok := rt.config.driver.(*txDriver)
	if !ok {
		panic("ent: ReactionTemplate is not a transactional entity")
	}
	rt.config.driver = _tx.drv
	return rt
}

// String implements the fmt.Stringer.
func (rt *ReactionTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("ReactionTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(rt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("reaction=")
	builder.WriteString(rt.Reaction)
	builder.WriteByte(')')
	return builder.String()
}

// ReactionTemplates is a parsable slice of ReactionTemplate.
type ReactionTemplates []*ReactionTemplate

func (rt ReactionTemplates) config(cfg config) {
	for _i := range rt {
		rt[_i].config = cfg
	}
}
