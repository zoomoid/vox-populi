// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/poll"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/reaction"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/reactiontemplate"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/vote"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/votetemplate"
)

// PollCreate is the builder for creating a Poll entity.
type PollCreate struct {
	config
	mutation *PollMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (pc *PollCreate) SetCreatedAt(t time.Time) *PollCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PollCreate) SetNillableCreatedAt(t *time.Time) *PollCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PollCreate) SetUpdatedAt(t time.Time) *PollCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PollCreate) SetNillableUpdatedAt(t *time.Time) *PollCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetIsDeleted sets the "is_deleted" field.
func (pc *PollCreate) SetIsDeleted(b bool) *PollCreate {
	pc.mutation.SetIsDeleted(b)
	return pc
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (pc *PollCreate) SetNillableIsDeleted(b *bool) *PollCreate {
	if b != nil {
		pc.SetIsDeleted(*b)
	}
	return pc
}

// SetDeletedAt sets the "deleted_at" field.
func (pc *PollCreate) SetDeletedAt(t time.Time) *PollCreate {
	pc.mutation.SetDeletedAt(t)
	return pc
}

// SetTitle sets the "title" field.
func (pc *PollCreate) SetTitle(s string) *PollCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetDescription sets the "description" field.
func (pc *PollCreate) SetDescription(s string) *PollCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetIsLive sets the "is_live" field.
func (pc *PollCreate) SetIsLive(b bool) *PollCreate {
	pc.mutation.SetIsLive(b)
	return pc
}

// SetNillableIsLive sets the "is_live" field if the given value is not nil.
func (pc *PollCreate) SetNillableIsLive(b *bool) *PollCreate {
	if b != nil {
		pc.SetIsLive(*b)
	}
	return pc
}

// SetCanVote sets the "can_vote" field.
func (pc *PollCreate) SetCanVote(b bool) *PollCreate {
	pc.mutation.SetCanVote(b)
	return pc
}

// SetNillableCanVote sets the "can_vote" field if the given value is not nil.
func (pc *PollCreate) SetNillableCanVote(b *bool) *PollCreate {
	if b != nil {
		pc.SetCanVote(*b)
	}
	return pc
}

// SetCanReact sets the "can_react" field.
func (pc *PollCreate) SetCanReact(b bool) *PollCreate {
	pc.mutation.SetCanReact(b)
	return pc
}

// SetNillableCanReact sets the "can_react" field if the given value is not nil.
func (pc *PollCreate) SetNillableCanReact(b *bool) *PollCreate {
	if b != nil {
		pc.SetCanReact(*b)
	}
	return pc
}

// SetCanSeeResults sets the "can_see_results" field.
func (pc *PollCreate) SetCanSeeResults(b bool) *PollCreate {
	pc.mutation.SetCanSeeResults(b)
	return pc
}

// SetNillableCanSeeResults sets the "can_see_results" field if the given value is not nil.
func (pc *PollCreate) SetNillableCanSeeResults(b *bool) *PollCreate {
	if b != nil {
		pc.SetCanSeeResults(*b)
	}
	return pc
}

// SetPublishedAt sets the "published_at" field.
func (pc *PollCreate) SetPublishedAt(t time.Time) *PollCreate {
	pc.mutation.SetPublishedAt(t)
	return pc
}

// SetUnpublishedAt sets the "unpublished_at" field.
func (pc *PollCreate) SetUnpublishedAt(t time.Time) *PollCreate {
	pc.mutation.SetUnpublishedAt(t)
	return pc
}

// AddVoteTemplateIDs adds the "vote_templates" edge to the VoteTemplate entity by IDs.
func (pc *PollCreate) AddVoteTemplateIDs(ids ...int) *PollCreate {
	pc.mutation.AddVoteTemplateIDs(ids...)
	return pc
}

// AddVoteTemplates adds the "vote_templates" edges to the VoteTemplate entity.
func (pc *PollCreate) AddVoteTemplates(v ...*VoteTemplate) *PollCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pc.AddVoteTemplateIDs(ids...)
}

// AddVoteIDs adds the "votes" edge to the Vote entity by IDs.
func (pc *PollCreate) AddVoteIDs(ids ...int) *PollCreate {
	pc.mutation.AddVoteIDs(ids...)
	return pc
}

// AddVotes adds the "votes" edges to the Vote entity.
func (pc *PollCreate) AddVotes(v ...*Vote) *PollCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return pc.AddVoteIDs(ids...)
}

// AddReactionTemplateIDs adds the "reaction_templates" edge to the ReactionTemplate entity by IDs.
func (pc *PollCreate) AddReactionTemplateIDs(ids ...int) *PollCreate {
	pc.mutation.AddReactionTemplateIDs(ids...)
	return pc
}

// AddReactionTemplates adds the "reaction_templates" edges to the ReactionTemplate entity.
func (pc *PollCreate) AddReactionTemplates(r ...*ReactionTemplate) *PollCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddReactionTemplateIDs(ids...)
}

// AddReactionIDs adds the "reactions" edge to the Reaction entity by IDs.
func (pc *PollCreate) AddReactionIDs(ids ...int) *PollCreate {
	pc.mutation.AddReactionIDs(ids...)
	return pc
}

// AddReactions adds the "reactions" edges to the Reaction entity.
func (pc *PollCreate) AddReactions(r ...*Reaction) *PollCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pc.AddReactionIDs(ids...)
}

// Mutation returns the PollMutation object of the builder.
func (pc *PollCreate) Mutation() *PollMutation {
	return pc.mutation
}

// Save creates the Poll in the database.
func (pc *PollCreate) Save(ctx context.Context) (*Poll, error) {
	var (
		err  error
		node *Poll
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PollMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Poll)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PollMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PollCreate) SaveX(ctx context.Context) *Poll {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PollCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PollCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PollCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := poll.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := poll.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.IsDeleted(); !ok {
		v := poll.DefaultIsDeleted
		pc.mutation.SetIsDeleted(v)
	}
	if _, ok := pc.mutation.IsLive(); !ok {
		v := poll.DefaultIsLive
		pc.mutation.SetIsLive(v)
	}
	if _, ok := pc.mutation.CanVote(); !ok {
		v := poll.DefaultCanVote
		pc.mutation.SetCanVote(v)
	}
	if _, ok := pc.mutation.CanReact(); !ok {
		v := poll.DefaultCanReact
		pc.mutation.SetCanReact(v)
	}
	if _, ok := pc.mutation.CanSeeResults(); !ok {
		v := poll.DefaultCanSeeResults
		pc.mutation.SetCanSeeResults(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PollCreate) check() error {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Poll.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Poll.updated_at"`)}
	}
	if _, ok := pc.mutation.IsDeleted(); !ok {
		return &ValidationError{Name: "is_deleted", err: errors.New(`ent: missing required field "Poll.is_deleted"`)}
	}
	if _, ok := pc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Poll.deleted_at"`)}
	}
	if _, ok := pc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Poll.title"`)}
	}
	if v, ok := pc.mutation.Title(); ok {
		if err := poll.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Poll.title": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Poll.description"`)}
	}
	if _, ok := pc.mutation.IsLive(); !ok {
		return &ValidationError{Name: "is_live", err: errors.New(`ent: missing required field "Poll.is_live"`)}
	}
	if _, ok := pc.mutation.CanVote(); !ok {
		return &ValidationError{Name: "can_vote", err: errors.New(`ent: missing required field "Poll.can_vote"`)}
	}
	if _, ok := pc.mutation.CanReact(); !ok {
		return &ValidationError{Name: "can_react", err: errors.New(`ent: missing required field "Poll.can_react"`)}
	}
	if _, ok := pc.mutation.CanSeeResults(); !ok {
		return &ValidationError{Name: "can_see_results", err: errors.New(`ent: missing required field "Poll.can_see_results"`)}
	}
	if _, ok := pc.mutation.PublishedAt(); !ok {
		return &ValidationError{Name: "published_at", err: errors.New(`ent: missing required field "Poll.published_at"`)}
	}
	if _, ok := pc.mutation.UnpublishedAt(); !ok {
		return &ValidationError{Name: "unpublished_at", err: errors.New(`ent: missing required field "Poll.unpublished_at"`)}
	}
	return nil
}

func (pc *PollCreate) sqlSave(ctx context.Context) (*Poll, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pc *PollCreate) createSpec() (*Poll, *sqlgraph.CreateSpec) {
	var (
		_node = &Poll{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: poll.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: poll.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(poll.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(poll.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.IsDeleted(); ok {
		_spec.SetField(poll.FieldIsDeleted, field.TypeBool, value)
		_node.IsDeleted = value
	}
	if value, ok := pc.mutation.DeletedAt(); ok {
		_spec.SetField(poll.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.SetField(poll.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(poll.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.IsLive(); ok {
		_spec.SetField(poll.FieldIsLive, field.TypeBool, value)
		_node.IsLive = value
	}
	if value, ok := pc.mutation.CanVote(); ok {
		_spec.SetField(poll.FieldCanVote, field.TypeBool, value)
		_node.CanVote = value
	}
	if value, ok := pc.mutation.CanReact(); ok {
		_spec.SetField(poll.FieldCanReact, field.TypeBool, value)
		_node.CanReact = value
	}
	if value, ok := pc.mutation.CanSeeResults(); ok {
		_spec.SetField(poll.FieldCanSeeResults, field.TypeBool, value)
		_node.CanSeeResults = value
	}
	if value, ok := pc.mutation.PublishedAt(); ok {
		_spec.SetField(poll.FieldPublishedAt, field.TypeTime, value)
		_node.PublishedAt = &value
	}
	if value, ok := pc.mutation.UnpublishedAt(); ok {
		_spec.SetField(poll.FieldUnpublishedAt, field.TypeTime, value)
		_node.UnpublishedAt = &value
	}
	if nodes := pc.mutation.VoteTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VoteTemplatesTable,
			Columns: []string{poll.VoteTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: votetemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.VotesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.VotesTable,
			Columns: []string{poll.VotesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: vote.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ReactionTemplatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionTemplatesTable,
			Columns: []string{poll.ReactionTemplatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reactiontemplate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ReactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poll.ReactionsTable,
			Columns: []string{poll.ReactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: reaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PollCreateBulk is the builder for creating many Poll entities in bulk.
type PollCreateBulk struct {
	config
	builders []*PollCreate
}

// Save creates the Poll entities in the database.
func (pcb *PollCreateBulk) Save(ctx context.Context) ([]*Poll, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Poll, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PollMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PollCreateBulk) SaveX(ctx context.Context) []*Poll {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PollCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PollCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
