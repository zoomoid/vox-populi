// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/poll"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/votetemplate"
)

// VoteTemplate is the model entity for the VoteTemplate schema.
type VoteTemplate struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Answer holds the value of the "answer" field.
	Answer string `json:"answer,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VoteTemplateQuery when eager-loading is set.
	Edges               VoteTemplateEdges `json:"edges"`
	poll_vote_templates *int
}

// VoteTemplateEdges holds the relations/edges for other nodes in the graph.
type VoteTemplateEdges struct {
	// Poll holds the value of the poll edge.
	Poll *Poll `json:"poll,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PollOrErr returns the Poll value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e VoteTemplateEdges) PollOrErr() (*Poll, error) {
	if e.loadedTypes[0] {
		if e.Poll == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: poll.Label}
		}
		return e.Poll, nil
	}
	return nil, &NotLoadedError{edge: "poll"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VoteTemplate) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case votetemplate.FieldID:
			values[i] = new(sql.NullInt64)
		case votetemplate.FieldAnswer:
			values[i] = new(sql.NullString)
		case votetemplate.FieldCreatedAt, votetemplate.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case votetemplate.ForeignKeys[0]: // poll_vote_templates
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type VoteTemplate", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VoteTemplate fields.
func (vt *VoteTemplate) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case votetemplate.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vt.ID = int(value.Int64)
		case votetemplate.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				vt.CreatedAt = value.Time
			}
		case votetemplate.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				vt.UpdatedAt = value.Time
			}
		case votetemplate.FieldAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[i])
			} else if value.Valid {
				vt.Answer = value.String
			}
		case votetemplate.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field poll_vote_templates", value)
			} else if value.Valid {
				vt.poll_vote_templates = new(int)
				*vt.poll_vote_templates = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPoll queries the "poll" edge of the VoteTemplate entity.
func (vt *VoteTemplate) QueryPoll() *PollQuery {
	return (&VoteTemplateClient{config: vt.config}).QueryPoll(vt)
}

// Update returns a builder for updating this VoteTemplate.
// Note that you need to call VoteTemplate.Unwrap() before calling this method if this VoteTemplate
// was returned from a transaction, and the transaction was committed or rolled back.
func (vt *VoteTemplate) Update() *VoteTemplateUpdateOne {
	return (&VoteTemplateClient{config: vt.config}).UpdateOne(vt)
}

// Unwrap unwraps the VoteTemplate entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vt *VoteTemplate) Unwrap() *VoteTemplate {
	_tx, ok := vt.config.driver.(*txDriver)
	if !ok {
		panic("ent: VoteTemplate is not a transactional entity")
	}
	vt.config.driver = _tx.drv
	return vt
}

// String implements the fmt.Stringer.
func (vt *VoteTemplate) String() string {
	var builder strings.Builder
	builder.WriteString("VoteTemplate(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(vt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(vt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("answer=")
	builder.WriteString(vt.Answer)
	builder.WriteByte(')')
	return builder.String()
}

// VoteTemplates is a parsable slice of VoteTemplate.
type VoteTemplates []*VoteTemplate

func (vt VoteTemplates) config(cfg config) {
	for _i := range vt {
		vt[_i].config = cfg
	}
}
