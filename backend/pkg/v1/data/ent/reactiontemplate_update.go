// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/poll"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/predicate"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/reactiontemplate"
)

// ReactionTemplateUpdate is the builder for updating ReactionTemplate entities.
type ReactionTemplateUpdate struct {
	config
	hooks    []Hook
	mutation *ReactionTemplateMutation
}

// Where appends a list predicates to the ReactionTemplateUpdate builder.
func (rtu *ReactionTemplateUpdate) Where(ps ...predicate.ReactionTemplate) *ReactionTemplateUpdate {
	rtu.mutation.Where(ps...)
	return rtu
}

// SetUpdatedAt sets the "updated_at" field.
func (rtu *ReactionTemplateUpdate) SetUpdatedAt(t time.Time) *ReactionTemplateUpdate {
	rtu.mutation.SetUpdatedAt(t)
	return rtu
}

// SetReaction sets the "reaction" field.
func (rtu *ReactionTemplateUpdate) SetReaction(s string) *ReactionTemplateUpdate {
	rtu.mutation.SetReaction(s)
	return rtu
}

// SetPollID sets the "poll" edge to the Poll entity by ID.
func (rtu *ReactionTemplateUpdate) SetPollID(id int) *ReactionTemplateUpdate {
	rtu.mutation.SetPollID(id)
	return rtu
}

// SetNillablePollID sets the "poll" edge to the Poll entity by ID if the given value is not nil.
func (rtu *ReactionTemplateUpdate) SetNillablePollID(id *int) *ReactionTemplateUpdate {
	if id != nil {
		rtu = rtu.SetPollID(*id)
	}
	return rtu
}

// SetPoll sets the "poll" edge to the Poll entity.
func (rtu *ReactionTemplateUpdate) SetPoll(p *Poll) *ReactionTemplateUpdate {
	return rtu.SetPollID(p.ID)
}

// Mutation returns the ReactionTemplateMutation object of the builder.
func (rtu *ReactionTemplateUpdate) Mutation() *ReactionTemplateMutation {
	return rtu.mutation
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (rtu *ReactionTemplateUpdate) ClearPoll() *ReactionTemplateUpdate {
	rtu.mutation.ClearPoll()
	return rtu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *ReactionTemplateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rtu.defaults()
	if len(rtu.hooks) == 0 {
		if err = rtu.check(); err != nil {
			return 0, err
		}
		affected, err = rtu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReactionTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtu.check(); err != nil {
				return 0, err
			}
			rtu.mutation = mutation
			affected, err = rtu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rtu.hooks) - 1; i >= 0; i-- {
			if rtu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rtu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rtu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *ReactionTemplateUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *ReactionTemplateUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *ReactionTemplateUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtu *ReactionTemplateUpdate) defaults() {
	if _, ok := rtu.mutation.UpdatedAt(); !ok {
		v := reactiontemplate.UpdateDefaultUpdatedAt()
		rtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtu *ReactionTemplateUpdate) check() error {
	if v, ok := rtu.mutation.Reaction(); ok {
		if err := reactiontemplate.ReactionValidator(v); err != nil {
			return &ValidationError{Name: "reaction", err: fmt.Errorf(`ent: validator failed for field "ReactionTemplate.reaction": %w`, err)}
		}
	}
	return nil
}

func (rtu *ReactionTemplateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reactiontemplate.Table,
			Columns: reactiontemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reactiontemplate.FieldID,
			},
		},
	}
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.UpdatedAt(); ok {
		_spec.SetField(reactiontemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rtu.mutation.Reaction(); ok {
		_spec.SetField(reactiontemplate.FieldReaction, field.TypeString, value)
	}
	if rtu.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reactiontemplate.PollTable,
			Columns: []string{reactiontemplate.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: poll.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtu.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reactiontemplate.PollTable,
			Columns: []string{reactiontemplate.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: poll.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reactiontemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ReactionTemplateUpdateOne is the builder for updating a single ReactionTemplate entity.
type ReactionTemplateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReactionTemplateMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (rtuo *ReactionTemplateUpdateOne) SetUpdatedAt(t time.Time) *ReactionTemplateUpdateOne {
	rtuo.mutation.SetUpdatedAt(t)
	return rtuo
}

// SetReaction sets the "reaction" field.
func (rtuo *ReactionTemplateUpdateOne) SetReaction(s string) *ReactionTemplateUpdateOne {
	rtuo.mutation.SetReaction(s)
	return rtuo
}

// SetPollID sets the "poll" edge to the Poll entity by ID.
func (rtuo *ReactionTemplateUpdateOne) SetPollID(id int) *ReactionTemplateUpdateOne {
	rtuo.mutation.SetPollID(id)
	return rtuo
}

// SetNillablePollID sets the "poll" edge to the Poll entity by ID if the given value is not nil.
func (rtuo *ReactionTemplateUpdateOne) SetNillablePollID(id *int) *ReactionTemplateUpdateOne {
	if id != nil {
		rtuo = rtuo.SetPollID(*id)
	}
	return rtuo
}

// SetPoll sets the "poll" edge to the Poll entity.
func (rtuo *ReactionTemplateUpdateOne) SetPoll(p *Poll) *ReactionTemplateUpdateOne {
	return rtuo.SetPollID(p.ID)
}

// Mutation returns the ReactionTemplateMutation object of the builder.
func (rtuo *ReactionTemplateUpdateOne) Mutation() *ReactionTemplateMutation {
	return rtuo.mutation
}

// ClearPoll clears the "poll" edge to the Poll entity.
func (rtuo *ReactionTemplateUpdateOne) ClearPoll() *ReactionTemplateUpdateOne {
	rtuo.mutation.ClearPoll()
	return rtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rtuo *ReactionTemplateUpdateOne) Select(field string, fields ...string) *ReactionTemplateUpdateOne {
	rtuo.fields = append([]string{field}, fields...)
	return rtuo
}

// Save executes the query and returns the updated ReactionTemplate entity.
func (rtuo *ReactionTemplateUpdateOne) Save(ctx context.Context) (*ReactionTemplate, error) {
	var (
		err  error
		node *ReactionTemplate
	)
	rtuo.defaults()
	if len(rtuo.hooks) == 0 {
		if err = rtuo.check(); err != nil {
			return nil, err
		}
		node, err = rtuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReactionTemplateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rtuo.check(); err != nil {
				return nil, err
			}
			rtuo.mutation = mutation
			node, err = rtuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rtuo.hooks) - 1; i >= 0; i-- {
			if rtuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rtuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rtuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ReactionTemplate)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ReactionTemplateMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *ReactionTemplateUpdateOne) SaveX(ctx context.Context) *ReactionTemplate {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *ReactionTemplateUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *ReactionTemplateUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rtuo *ReactionTemplateUpdateOne) defaults() {
	if _, ok := rtuo.mutation.UpdatedAt(); !ok {
		v := reactiontemplate.UpdateDefaultUpdatedAt()
		rtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rtuo *ReactionTemplateUpdateOne) check() error {
	if v, ok := rtuo.mutation.Reaction(); ok {
		if err := reactiontemplate.ReactionValidator(v); err != nil {
			return &ValidationError{Name: "reaction", err: fmt.Errorf(`ent: validator failed for field "ReactionTemplate.reaction": %w`, err)}
		}
	}
	return nil
}

func (rtuo *ReactionTemplateUpdateOne) sqlSave(ctx context.Context) (_node *ReactionTemplate, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   reactiontemplate.Table,
			Columns: reactiontemplate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: reactiontemplate.FieldID,
			},
		},
	}
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ReactionTemplate.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reactiontemplate.FieldID)
		for _, f := range fields {
			if !reactiontemplate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reactiontemplate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(reactiontemplate.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := rtuo.mutation.Reaction(); ok {
		_spec.SetField(reactiontemplate.FieldReaction, field.TypeString, value)
	}
	if rtuo.mutation.PollCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reactiontemplate.PollTable,
			Columns: []string{reactiontemplate.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: poll.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rtuo.mutation.PollIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   reactiontemplate.PollTable,
			Columns: []string{reactiontemplate.PollColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: poll.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ReactionTemplate{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reactiontemplate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
