// Code generated by ent, DO NOT EDIT.

package poll

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/zoomoid/vox-populi/backend/pkg/v1/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// IsLive applies equality check predicate on the "is_live" field. It's identical to IsLiveEQ.
func IsLive(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLive), v))
	})
}

// CanVote applies equality check predicate on the "can_vote" field. It's identical to CanVoteEQ.
func CanVote(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCanVote), v))
	})
}

// CanReact applies equality check predicate on the "can_react" field. It's identical to CanReactEQ.
func CanReact(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCanReact), v))
	})
}

// CanSeeResults applies equality check predicate on the "can_see_results" field. It's identical to CanSeeResultsEQ.
func CanSeeResults(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCanSeeResults), v))
	})
}

// PublishedAt applies equality check predicate on the "published_at" field. It's identical to PublishedAtEQ.
func PublishedAt(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublishedAt), v))
	})
}

// UnpublishedAt applies equality check predicate on the "unpublished_at" field. It's identical to UnpublishedAtEQ.
func UnpublishedAt(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnpublishedAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeleted), v))
	})
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeleted), v))
	})
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDeletedAt), v...))
	})
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeletedAt), v))
	})
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeletedAt), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDescription), v))
	})
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDescription), v))
	})
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDescription), v...))
	})
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDescription), v...))
	})
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDescription), v))
	})
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDescription), v))
	})
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDescription), v))
	})
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDescription), v))
	})
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDescription), v))
	})
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDescription), v))
	})
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDescription), v))
	})
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDescription), v))
	})
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDescription), v))
	})
}

// IsLiveEQ applies the EQ predicate on the "is_live" field.
func IsLiveEQ(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLive), v))
	})
}

// IsLiveNEQ applies the NEQ predicate on the "is_live" field.
func IsLiveNEQ(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsLive), v))
	})
}

// CanVoteEQ applies the EQ predicate on the "can_vote" field.
func CanVoteEQ(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCanVote), v))
	})
}

// CanVoteNEQ applies the NEQ predicate on the "can_vote" field.
func CanVoteNEQ(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCanVote), v))
	})
}

// CanReactEQ applies the EQ predicate on the "can_react" field.
func CanReactEQ(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCanReact), v))
	})
}

// CanReactNEQ applies the NEQ predicate on the "can_react" field.
func CanReactNEQ(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCanReact), v))
	})
}

// CanSeeResultsEQ applies the EQ predicate on the "can_see_results" field.
func CanSeeResultsEQ(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCanSeeResults), v))
	})
}

// CanSeeResultsNEQ applies the NEQ predicate on the "can_see_results" field.
func CanSeeResultsNEQ(v bool) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCanSeeResults), v))
	})
}

// PublishedAtEQ applies the EQ predicate on the "published_at" field.
func PublishedAtEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPublishedAt), v))
	})
}

// PublishedAtNEQ applies the NEQ predicate on the "published_at" field.
func PublishedAtNEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPublishedAt), v))
	})
}

// PublishedAtIn applies the In predicate on the "published_at" field.
func PublishedAtIn(vs ...time.Time) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPublishedAt), v...))
	})
}

// PublishedAtNotIn applies the NotIn predicate on the "published_at" field.
func PublishedAtNotIn(vs ...time.Time) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPublishedAt), v...))
	})
}

// PublishedAtGT applies the GT predicate on the "published_at" field.
func PublishedAtGT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPublishedAt), v))
	})
}

// PublishedAtGTE applies the GTE predicate on the "published_at" field.
func PublishedAtGTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPublishedAt), v))
	})
}

// PublishedAtLT applies the LT predicate on the "published_at" field.
func PublishedAtLT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPublishedAt), v))
	})
}

// PublishedAtLTE applies the LTE predicate on the "published_at" field.
func PublishedAtLTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPublishedAt), v))
	})
}

// UnpublishedAtEQ applies the EQ predicate on the "unpublished_at" field.
func UnpublishedAtEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUnpublishedAt), v))
	})
}

// UnpublishedAtNEQ applies the NEQ predicate on the "unpublished_at" field.
func UnpublishedAtNEQ(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUnpublishedAt), v))
	})
}

// UnpublishedAtIn applies the In predicate on the "unpublished_at" field.
func UnpublishedAtIn(vs ...time.Time) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUnpublishedAt), v...))
	})
}

// UnpublishedAtNotIn applies the NotIn predicate on the "unpublished_at" field.
func UnpublishedAtNotIn(vs ...time.Time) predicate.Poll {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUnpublishedAt), v...))
	})
}

// UnpublishedAtGT applies the GT predicate on the "unpublished_at" field.
func UnpublishedAtGT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUnpublishedAt), v))
	})
}

// UnpublishedAtGTE applies the GTE predicate on the "unpublished_at" field.
func UnpublishedAtGTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUnpublishedAt), v))
	})
}

// UnpublishedAtLT applies the LT predicate on the "unpublished_at" field.
func UnpublishedAtLT(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUnpublishedAt), v))
	})
}

// UnpublishedAtLTE applies the LTE predicate on the "unpublished_at" field.
func UnpublishedAtLTE(v time.Time) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUnpublishedAt), v))
	})
}

// HasVoteTemplates applies the HasEdge predicate on the "vote_templates" edge.
func HasVoteTemplates() predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VoteTemplatesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VoteTemplatesTable, VoteTemplatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVoteTemplatesWith applies the HasEdge predicate on the "vote_templates" edge with a given conditions (other predicates).
func HasVoteTemplatesWith(preds ...predicate.VoteTemplate) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VoteTemplatesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VoteTemplatesTable, VoteTemplatesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVotes applies the HasEdge predicate on the "votes" edge.
func HasVotes() predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VotesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VotesTable, VotesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVotesWith applies the HasEdge predicate on the "votes" edge with a given conditions (other predicates).
func HasVotesWith(preds ...predicate.Vote) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VotesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, VotesTable, VotesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReactionTemplates applies the HasEdge predicate on the "reaction_templates" edge.
func HasReactionTemplates() predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionTemplatesTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReactionTemplatesTable, ReactionTemplatesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReactionTemplatesWith applies the HasEdge predicate on the "reaction_templates" edge with a given conditions (other predicates).
func HasReactionTemplatesWith(preds ...predicate.ReactionTemplate) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionTemplatesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReactionTemplatesTable, ReactionTemplatesColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReactions applies the HasEdge predicate on the "reactions" edge.
func HasReactions() predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReactionsTable, ReactionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReactionsWith applies the HasEdge predicate on the "reactions" edge with a given conditions (other predicates).
func HasReactionsWith(preds ...predicate.Reaction) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ReactionsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReactionsTable, ReactionsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Poll) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Poll) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Poll) predicate.Poll {
	return predicate.Poll(func(s *sql.Selector) {
		p(s.Not())
	})
}
